[
  {
    "objectID": "notebooks/04_artemis_events.html",
    "href": "notebooks/04_artemis_events.html",
    "title": "ARTEMIS",
    "section": "",
    "text": "Why sometimes we don’t have pressure tensor but have temperature tensor?\nTHB_L2_MOM\n\nthb_peem_ptens_magQ —–Electron Pressure Tensor, Field Aligned\nthb_peem_t3_magQ —–Electron Temperature, Field Aligned (TprpFA1, TprpFA2, TparFA)\nthb_peim_ptens_magQ —–Ion Pressure Tensor, Field Aligned\nthb_peim_t3_magQ —–Ion Temperature, Field Aligned (TprpFA1, TprpFA2, TparFA)\n%load_ext autoreload\n%autoreload 2\nfrom utils.config import IDsConfig, WindConfig, THEMISConfig, get_timerange\nfrom rich import print\n\n11-May-24 13:14:26: UserWarning: Proxy server is disabled you might want to use it both to improve Speasy performances and to reduce pressure on remote servers\nuse the following python snippet to configure proxy server:\n===========================================================================\nimport speasy as spz\nspz.config.proxy.url.set(\"http://sciqlop.lpp.polytechnique.fr/cache\")\nspz.config.proxy.enabled.set(True)\n===========================================================================\n            \n\n11-May-24 13:14:36: Query finished.\n\n\nINFO: Query finished. [astroquery.utils.tap.core]\n\n\n11-May-24 13:14:38: Query finished.\n\n\nINFO: Query finished. [astroquery.utils.tap.core]\n\n\n11-May-24 13:14:41: Query finished.\n\n\nINFO: Query finished. [astroquery.utils.tap.core]\n\n\nKeyboardInterrupt:\nenc = 2\npsp_timerange, earth_timerange = get_timerange(enc)\nw_conf = WindConfig(\n    enc = enc,\n    timerange=earth_timerange,\n).load()\nw_conf.plot_candidates()\n\n2024-02-29 17:54:11.813 | INFO     | discontinuitypy.datasets:plot_candidates:241 - Candidates indices: [253 297 256  55]\n\n\n[(&lt;Figure size 1200x500 with 1 Axes&gt;,\n  &lt;Axes: title={'center': '#Discontinuity properties# $L: 322.47 \\\\mathrm{km}$, $j: 10.42 \\\\mathrm{nA/m}^2$'}, ylabel='$B$\\n[nT LMN]'&gt;),\n (&lt;Figure size 1200x500 with 1 Axes&gt;,\n  &lt;Axes: title={'center': '#Discontinuity properties# $L: 218.48 \\\\mathrm{km}$, $j: -10.06 \\\\mathrm{nA/m}^2$'}, ylabel='$B$\\n[nT LMN]'&gt;),\n (&lt;Figure size 1200x500 with 1 Axes&gt;,\n  &lt;Axes: title={'center': '#Discontinuity properties# $L: 719.62 \\\\mathrm{km}$, $j: 10.87 \\\\mathrm{nA/m}^2$'}, ylabel='$B$\\n[nT LMN]'&gt;),\n (&lt;Figure size 1200x500 with 1 Axes&gt;,\n  &lt;Axes: title={'center': '#Discontinuity properties# $L: 1413.51 \\\\mathrm{km}$, $j: -1.04 \\\\mathrm{nA/m}^2$'}, ylabel='$B$\\n[nT LMN]'&gt;)]",
    "crumbs": [
      "Home",
      "Notebooks",
      "ARTEMIS"
    ]
  },
  {
    "objectID": "notebooks/04_artemis_events.html#themis-examples",
    "href": "notebooks/04_artemis_events.html#themis-examples",
    "title": "ARTEMIS",
    "section": "Themis Examples",
    "text": "Themis Examples\n\nthm_conf = THEMISConfig(\n    enc = enc,\n    timerange=earth_timerange,\n).load()\n\nthm_conf.plot_candidates()\n\n29-Feb-24 17:57:14: DeprecationWarning: parsing timezone aware datetimes is deprecated; this will raise an error in the future\n\n2024-02-29 17:57:14.270 | INFO     | discontinuitypy.datasets:plot_candidates:241 - Candidates indices: [183  47  12  11]\n\n\n[(&lt;Figure size 1200x500 with 1 Axes&gt;,\n  &lt;Axes: title={'center': '#Discontinuity properties# $L: 645.24 \\\\mathrm{km}$, $j: -1.49 \\\\mathrm{nA/m}^2$'}, ylabel='$B$\\n[nT LMN]'&gt;),\n (&lt;Figure size 1200x500 with 1 Axes&gt;,\n  &lt;Axes: title={'center': '#Discontinuity properties# $L: 206.11 \\\\mathrm{km}$, $j: 15.56 \\\\mathrm{nA/m}^2$'}, ylabel='$B$\\n[nT LMN]'&gt;),\n (&lt;Figure size 1200x500 with 1 Axes&gt;,\n  &lt;Axes: title={'center': '#Discontinuity properties# $L: 168.50 \\\\mathrm{km}$, $j: -6.81 \\\\mathrm{nA/m}^2$'}, ylabel='$B$\\n[nT LMN]'&gt;),\n (&lt;Figure size 1200x500 with 1 Axes&gt;,\n  &lt;Axes: title={'center': '#Discontinuity properties# $L: 358.93 \\\\mathrm{km}$, $j: 8.56 \\\\mathrm{nA/m}^2$'}, ylabel='$B$\\n[nT LMN]'&gt;)]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nenc = 2\n# timerange = [\"2019-04-10\", \"2019-04-10T01\"]\ntimerange = [\"2019-04-09\", \"2019-04-12\"]\ndir = f\"../data/enc{enc}/\"\n\nwind_conf = WindConfig(\n    timerange =timerange,\n    tau=30,\n)\n\nthm_conf = THEMISConfig(\n    timerange =timerange,\n    tau=30,\n)\n\nconfs : list[IDsConfig] = [wind_conf, thm_conf]\nprint(wind_conf)\nprint(thm_conf)\n\nWindConfig(\n    name='Wind',\n    data=None,\n    ts=datetime.timedelta(microseconds=90909),\n    tau=datetime.timedelta(seconds=30),\n    events=None,\n    method='fit',\n    mag_meta=Meta(dataset='WI_H2_MFI', parameters=['BGSE']),\n    bcols=None,\n    plasma_data=None,\n    plasma_meta=PlasmaMeta(\n        dataset='WI_PM_3DP',\n        parameters=['P_DENS', 'P_VELS', 'P_TEMP'],\n        density_col=None,\n        velocity_cols=None,\n        speed_col=None,\n        temperature_col=None\n    ),\n    ion_temp_data=None,\n    ion_temp_meta=TempMeta(\n        dataset='WI_PLSP_3DP',\n        parameters=['MOM.P.MAGT3'],\n        para_col='proton_MagT3_Z',\n        perp_cols=['proton_MagT3_X', 'proton_MagT3_Y']\n    ),\n    e_temp_data=None,\n    e_temp_meta=TempMeta(\n        dataset='WI_ELM2_3DP',\n        parameters=['MAGT3'],\n        para_col='electron_MagT3_Para',\n        perp_cols=['electron_MagT3_Perp1', 'electron_MagT3_Perp2']\n    ),\n    timerange=[\n        datetime.datetime(2019, 4, 9, 0, 0, tzinfo=TzInfo(UTC)),\n        datetime.datetime(2019, 4, 12, 0, 0, tzinfo=TzInfo(UTC))\n    ],\n    split=1,\n    fmt='arrow'\n)\n\n\n\nTHEMISConfig(\n    name='THM',\n    data=None,\n    ts=datetime.timedelta(seconds=1),\n    tau=datetime.timedelta(seconds=30),\n    events=None,\n    method='fit',\n    mag_meta=Meta(dataset='THB_L2_FGM', parameters=['thb_fgl_gse']),\n    bcols=None,\n    plasma_data=None,\n    plasma_meta=PlasmaMeta(\n        dataset='THB_L2_MOM',\n        parameters=['thb_peim_densityQ', 'thb_peim_velocity_gseQ', 'thb_peim_ptotQ'],\n        density_col=None,\n        velocity_cols=None,\n        speed_col=None,\n        temperature_col=None\n    ),\n    ion_temp_data=None,\n    ion_temp_meta=TempMeta(\n        dataset='THB_L2_MOM',\n        parameters=['thb_peim_t3_magQ'],\n        para_col='Tz_ion FA MOM ESA-B',\n        perp_cols=['Tx_ion FA MOM ESA-B', 'Ty_ion FA MOM ESA-B']\n    ),\n    e_temp_data=None,\n    e_temp_meta=TempMeta(\n        dataset='THB_L2_MOM',\n        parameters=['thb_peem_t3_magQ'],\n        para_col='Tz_elec FA MOM ESA-B',\n        perp_cols=['Tx_elec FA MOM ESA-B', 'Ty_elec FA MOM ESA-B']\n    ),\n    timerange=[\n        datetime.datetime(2019, 4, 9, 0, 0, tzinfo=TzInfo(UTC)),\n        datetime.datetime(2019, 4, 12, 0, 0, tzinfo=TzInfo(UTC))\n    ],\n    split=1,\n    fmt='arrow'\n)\n\n\n\n\nfrom utils.temp import calc_pressure_anisotropy\n\nfor conf in confs:\n    ids = conf.get_and_process_data().find_events().update_candidates_with_plasma_data()\n    path = f\"{dir}/{conf.fname}.{conf.fmt}\"\n    \n    ids.events = ids.events.sort(\"time\").join_asof(\n        conf.e_temp_df.collect().sort(\"time\"), on =\"time\"\n    ).join_asof(\n        conf.ion_temp_df.collect().sort(\"time\"), on =\"time\"\n    ).pipe(calc_pressure_anisotropy)\n    \n    ids.export(path)\n\n22-Feb-24 09:18:59: UserWarning: Distributing &lt;class 'pandas.core.frame.DataFrame'&gt; object. This may take some time.\n\n\n\n\n\n\n\n\n\n22-Feb-24 09:19:02: UserWarning: Distributing &lt;class 'pandas.core.frame.DataFrame'&gt; object. This may take some time.\n\n\n\n\n\n\n\n\n\nimport speasy as spz\nfrom speasy import SpeasyVariable\nimport matplotlib.pyplot as plt\n\nproducts = [\n    \"cda/THB_L2_MOM/thb_peem_t3_magQ\",\n    \"cda/THB_L2_MOM/thb_peim_t3_magQ\",\n    \"cda/WI_ELM2_3DP/MAGT3\",\n    # \"cda/WI_PLSP_3DP/MOM.P.MAGF\",\n]\n\n\nFigure 1\n\n\n\n\nearth_start = \"2019-04-09\"\nearth_end = \"2019-04-12\"\ntimerange = (earth_start, earth_end)",
    "crumbs": [
      "Home",
      "Notebooks",
      "ARTEMIS"
    ]
  },
  {
    "objectID": "notebooks/02_psp_events.html",
    "href": "notebooks/02_psp_events.html",
    "title": "Events",
    "section": "",
    "text": "%load_ext autoreload\n%autoreload 2\n\nThe autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\nimport polars as pl\nfrom discontinuitypy.datasets import IDsDataset\nfrom beforerr.polars import pl_norm\nfrom datetime import timedelta\nfrom space_analysis.utils.speasy import Variables\nfrom rich import print\nfrom utils import PSPConfig, get_timerange\nenc = 2\npsp_timerange, earth_timerange = get_timerange(enc)\nPSPConfig(\n    enc = enc,\n    timerange=psp_timerange,\n    instr_p = 'spi'\n).get_and_process_data().export()\n\n[&lt;speasy.products.variable.SpeasyVariable at 0x2fb8be840&gt;,\n &lt;speasy.products.variable.SpeasyVariable at 0x2fb89f780&gt;,\n &lt;speasy.products.variable.SpeasyVariable at 0x2fb89d180&gt;,\n &lt;speasy.products.variable.SpeasyVariable at 0x2fb8d1e80&gt;]\nQ: What is the time scale for change in magnetic field, density and velocity?\nmethod 1: directly interpolate density and velocity into magnetic field data respectively method 2: interpolate density into velocity data first",
    "crumbs": [
      "Home",
      "Notebooks",
      "Events"
    ]
  },
  {
    "objectID": "notebooks/02_psp_events.html#wind-dataset",
    "href": "notebooks/02_psp_events.html#wind-dataset",
    "title": "Events",
    "section": "Wind dataset",
    "text": "Wind dataset\n\nts = timedelta(seconds=1 / 11)\ntau = timedelta(seconds=30)\n\nmag_dataset = \"WI_H2_MFI\"\nmag_parameters = [\"BGSE\"]\n\nplasma_dataset=\"WI_PM_3DP\"\nplasma_parameters=[\"P_DENS\", \"P_VELS\", \"P_TEMP\"] # Proton velocity vector (GSE)\n\n# plasma_dataset=\"WI_K0_SWE\"\n# plasma_parameters=[\"Np\", \"V_GSM\", \"THERMAL_SPD\"]\n\ntimerange = validate(earth_timerange)\n\nfname = f\"{dir}/wind_ids_dataset_{enc}.{fmt}\"\n\n\n\ndef get_and_process_data(\n    mag_dataset,\n    mag_parameters,\n    timerange,\n    tau,\n    ts,\n    p_vars: Variables = None,\n    interpolate=True,\n    every=timedelta(seconds=0.2),\n):\n    # define variables\n    mag_vars = Variables(\n        dataset=mag_dataset,\n        parameters=mag_parameters,\n        timerange=timerange,\n    ).retrieve_data()\n\n    p_vars.timerange = timerange\n    p_vars.check_products()\n    p_vars.retrieve_data()\n\n    # get column names\n    bcols = mag_vars.data[0].columns\n    density_col = p_vars.data[0].columns[0]\n    vec_cols = p_vars.data[1].columns\n    temperature_col = p_vars.data[2].columns[0]\n\n    # get data\n    mag_data = mag_vars.to_polars().unique(\"time\")\n    plasma_data = (\n        p_vars.to_polars()\n        .with_columns(plasma_speed=pl_norm(vec_cols))\n        .rename({density_col: \"plasma_density\"})\n        .unique(\"time\")\n        # .drop_nulls()\n    )\n    # process temperature data\n    if p_vars.data[2].unit == \"km/s\":\n        plasma_data = plasma_data.pipe(df_thermal_spd2temp, temperature_col)\n    else:\n        plasma_data = plasma_data.rename({temperature_col: \"plasma_temperature\"})\n\n    if interpolate:\n        plasma_data = (\n            plasma_data.with_columns(pl.col(\"plasma_density\").fill_nan(None))\n            .pipe(resample, every=every)\n            .collect()\n            .sort(\"time\")\n            .upsample(\"time\", every=every)\n            .interpolate()\n            .lazy()\n        )\n\n    return IDsDataset(\n        mag_data=mag_data,\n        plasma_data=plasma_data,\n        tau=tau,\n        ts=ts,\n        bcols=bcols,\n        vec_cols=vec_cols,\n        density_col=\"plasma_density\",\n        speed_col=\"plasma_speed\",\n        temperature_col=\"plasma_temperature\",\n    )\n\n\nwind_ids_dataset = get_and_process_data(\n    mag_dataset, mag_parameters, plasma_dataset, plasma_parameters, timerange, tau, ts\n).find_events().update_candidates_with_plasma_data().export(fname)\n\n11-Feb-24 12:50:50: Using pycdfpp\n11-Feb-24 12:51:00: UserWarning: Distributing &lt;class 'pandas.core.frame.DataFrame'&gt; object. This may take some time.\n\n\n\n\n\n\n\n\n\n\nimport hvplot.polars\n\n\nwind_ids_dataset.plot()\n\n2024-02-11 12:51:03.398 | INFO     | discontinuitypy.datasets:overview_plot:172 - Overview plot: 2020-01-29 23:40:15 - 2020-01-29 23:40:45\n2024-02-11 12:51:03.398 | DEBUG    | discontinuitypy.datasets:log_event_change:79 - CHANGE INFO\n        n.change: 0.4995388984680176\n        v.ion.change: 7.461979130688064\n        T.change: 0.236236572265625\n        v.Alfven.change: -7.14332788724645\n        v.ion.change.l: 0.392388073545078\n        v.Alfven.change.l: 40.50811492639099\n        \n\n\n\n\n\n\n  \n\n\n\n\n\nfrom bokeh.io import output_notebook\noutput_notebook()",
    "crumbs": [
      "Home",
      "Notebooks",
      "Events"
    ]
  },
  {
    "objectID": "notebooks/10_results.html",
    "href": "notebooks/10_results.html",
    "title": "Results",
    "section": "",
    "text": "include(\"main.jl\")\nbegin\n    enc = \"enc2\" # event id (encounter id)\n    psp_p_instr = \".spc_n_spc\"\n    psp_p_instr = \".spi_n_spi\"\n\n    psp_df = load(enc, \"psp\"; suffix = psp_p_instr)\n    \n    thm_df = load(enc, \"thm\"; dataset=\"ARTEMIS\");\n    wind_df = load(enc, \"wind\"; dataset=\"Wind\");\n    mkpath(\"$fig_dir/$enc\")\nend\n\n\"../figures/enc2\"\nenc = \"enc7\"\npsp_df = load(enc, \"psp\"; dataset=\"Parker Solar Probe\");\nbegin\n    df = reduce(\n        vcat,\n        # [psp_df, wind_df],\n        [psp_df, thm_df, wind_df],\n        cols=:intersect\n    )\n\n    df.dataset = categorical(df.dataset)\n    levels!(df.dataset, [\"Parker Solar Probe\", \"ARTEMIS\", \"Wind\"])\n\n    earth_df = reduce(\n        vcat,\n        [thm_df, wind_df],\n        cols=:intersect\n    )\nend;\nbegin\n    # base data layer\n    data_layer = data(df) * mapping(color=ds_mapping, marker=ds_mapping)\n\n    # data layer with different alpha\n    data_layer_a = (\n        (data(thm_df) + data(wind_df)) * visual(alpha=0.2) + data(psp_df) * visual(alpha=1)\n    ) * mapping(\n        color=ds_mapping, marker=ds_mapping\n    )\n\n    # data layer with 1au missions\n    data_layer_b = (\n        (data(wind_df) + data(thm_df))\n    ) * mapping(\n        color=:dataset, marker=:dataset\n    )\nend;",
    "crumbs": [
      "Home",
      "Notebooks",
      "Results"
    ]
  },
  {
    "objectID": "notebooks/10_results.html#discontinuities-properties",
    "href": "notebooks/10_results.html#discontinuities-properties",
    "title": "Results",
    "section": "Discontinuities’ properties",
    "text": "Discontinuities’ properties\n\nfunction plot_l_j_local_comp(df)\n    fig = Figure(size=(1000, 800))\n\n    data_layer = data(df) * mapping(col=:dataset)\n    \n    facet = (; linkxaxes = :none, linkyaxes = :none)\n    # Thickness Panels\n    begin\n        plt = data_layer * mapping(l_map, di_map)\n        # plt *= histogram(normalization=:pdf)\n    \n        limits = ((0, 10000), (0, 150))\n        axis = (;limits=limits)\n\n        draw!(fig[1,1:3], plt, axis=axis, facet=facet) \n    end\n\n    # Current Density Panels\n    begin\n        plt = data_layer * mapping(jA_map, j_map)\n        # plt *= histogram(normalization=:pdf)\n        # axis = (;limits=j_log_limit)\n        axis = (;)\n        draw!(fig[2,1:3], plt, axis=axis, facet=facet) \n    end\n\n    fig\nend\n\ndf |&gt; keep_good_fit |&gt; plot_l_j_local_comp\n\n\n\n\n\nfunction plot_l_j_local_comp(df)\n    fig = Figure(size=(1000, 800))\n\n    data_layer = data(df) * mapping(col=:dataset)\n    \n    facet = (; linkxaxes = :none, linkyaxes = :none)\n    # Thickness Panels\n    begin\n        plt = data_layer * mapping(l_map, di_map)\n        # plt *= histogram(normalization=:pdf)\n    \n        limits = ((0, 10000), (0, 150))\n        axis = (;limits=limits)\n\n        draw!(fig[1,1:3], plt, axis=axis, facet=facet) \n    end\n\n    # Current Density Panels\n    begin\n        plt = data_layer * mapping(jA_map, j_map)\n        # plt *= histogram(normalization=:pdf)\n        # axis = (;limits=j_log_limit)\n        axis = (;)\n        draw!(fig[2,1:3], plt, axis=axis, facet=facet) \n    end\n\n    fig\nend\n\ndf |&gt; keep_good_fit |&gt; plot_l_j_local_comp\n\n\n\n\n\nbegin\n    fname = \"thickness_current\"\n\n    plt = data_layer_a * visual(Scatter)\n\n    fig = Figure(size=(1000, 500))\n    axis = log_axis\n\n    ga = fig[1, 1]\n    gb = fig[1, 2]\n\n    grid1 = plt * mapping(l_map, j_map) |&gt; draw!(ga; axis=axis)\n    grid2 = plt * mapping(l_norm_map, current_norm_map) |&gt; draw!(gb; axis=axis)\n\n    pretty_legend!(fig, grid1)\n    add_labels!([ga, gb])\n    easy_save(\"$fname$psp_p_instr\", fig)\n    fig\nend\n\n┌ Info: Saved ../figures/enc2/thickness_current.spi_n_spi\n└ @ Main /Users/zijin/projects/psp_conjunction/notebooks/utils.jl:11\n\n\n\n\n\n\n# plot the density distribution of the thickness and current density\nfunction plot_dist()\n    fname = \"density_distribution\"\n\n    # data_layer = data_layer_a\n    plt = data_layer * density()\n\n    fig = Figure(size=(1000, 700))\n\n    mapping_layer_j = mapping(:j0_k =&gt; log10 =&gt; L\"Log %$(j_label)\")\n    mapping_layer_j_norm = mapping(:j0_k_norm =&gt; log10 =&gt; L\"Log %$(j_norm_label)\")\n    mapping_layer_l = mapping(:L_k =&gt; log10 =&gt; L\"Log %$(l_label)\")\n    mapping_layer_l_norm = mapping(:L_k_norm =&gt; log10 =&gt; L\"Log %$(l_norm_label)\")\n\n    axis = (xscale = identity,)\n    \n    ga = fig[1, 1]\n    gb = fig[1, 2]\n    gc = fig[2, 1]\n    gd = fig[2, 2]\n\n    grid = draw!(ga, plt * mapping_layer_j; axis=axis)\n    plt * mapping_layer_j_norm |&gt; draw!(gb; axis=axis)\n    plt * mapping_layer_l |&gt; draw!(gc; axis=axis)\n    plt * mapping_layer_l_norm |&gt; draw!(gd; axis=axis)\n\n    pretty_legend!(fig, grid)\n    add_labels!([ga, gb, gc, gd]; labels=[\"a)\", \"b)\", \"c)\", \"d)\"])\n    easy_save(\"$fname$psp_p_instr\", fig)\n\n    fig\nend\n\nplot_dist()\n\n┌ Info: Saved ../figures/enc2/density_distribution.spi_n_spi\n└ @ Main /Users/zijin/projects/psp_conjunction/notebooks/utils.jl:11\n\n\n\n\n\nggscatterhist can not handle log scale well\n\ndn_over_n = (\"n.change\", \"n.mean\") =&gt; (/) =&gt; L\"\\Delta n/n\"\ndB_over_B = (\"B.change\", \"b_mag\") =&gt; (/) =&gt; L\"\\Delta B/B\"\ndT_over_T = (\"T.change\", \"T.mean\") =&gt; (/) =&gt; L\"\\Delta T/T\"\n\n(\"T.change\", \"T.mean\") =&gt; ((/) =&gt; L\"$\\Delta T/T$\")\n\n\n\nbegin\n    fname = \"dn-dB\"\n    plt = data_layer_a * mapping(dn_over_n, dB_over_B) * (linear() + mapping())\n\n    fig = Figure(size=(1000, 500))\n    grid1 = plt |&gt; draw!(fig[2, 1])\n    grid2 = plt |&gt; draw!(fig[2, 2], axis=(; limits=((-0.5, 0.5), (-0.5, 0.5))))\n\n    pretty_legend!(fig, grid1)\n    easy_save(\"$(fname)_$psp_p_instr\")\n\n    fig\nend\n\n\n\n\n\n\nFigure 1\n\n\n\n\n\nbegin\n    fname = \"dn-dT\"\n    plt = data_layer_a * mapping(dT_over_T, dn_over_n) * (linear() + mapping())\n\n    fig = Figure(size=(1000, 500))\n    grid1 = plt |&gt; draw!(fig[2, 1])\n    grid2 = plt |&gt; draw!(fig[2, 2]; axis=(; limits=((-0.5, 0.5), (-0.5, 0.5))))\n\n    pretty_legend!(fig, grid1)\n    easy_save(\"$(fname)_$psp_p_instr\")\n\n    fig\nend\n\n\n\n\n\n\nFigure 2\n\n\n\n\n\nbegin\n    fname = \"dT-dB\"\n    plt = data_layer_a * mapping(dT_over_T, dB_over_B) * (linear() + mapping())\n\n    fig = Figure(size=(1000, 500))\n    grid = draw!(fig[2, 1], plt)\n    draw!(fig[2, 2], plt, axis=(; limits=((-0.5, 0.5), (-0.5, 0.5))))\n    legend!(fig[1, 1:2], grid, titleposition=:left, orientation=:horizontal)\n\n    easy_save(\"$(fname)_$psp_p_instr\")\n\n    fig\nend\n\n\n\n\n\n\nFigure 3",
    "crumbs": [
      "Home",
      "Notebooks",
      "Results"
    ]
  },
  {
    "objectID": "notebooks/10_results.html#comparison-of-change-in-alfven-speed-and-plasma-speed",
    "href": "notebooks/10_results.html#comparison-of-change-in-alfven-speed-and-plasma-speed",
    "title": "Results",
    "section": "Comparison of change in Alfven speed and plasma speed",
    "text": "Comparison of change in Alfven speed and plasma speed\nThe distinguishing feature of rotational discontinuities is the plasma velocity jump across them: the plasma ﬂow velocity \\(v_l\\) (the solar wind velocity projected onto l) changes due to changes in \\(B_l\\), \\(Δv_l=±Δv_A\\) with \\(v_A= B_l / \\sqrt{4 n m}\\) (Landau & Lifshitz 1960; Hudson 1970).\n\nfig = plot_dvl(psp_df)\n\n┌ Info: Saved /Users/zijin/projects/psp_conjunction/figures/enc7/dvl.png\n└ @ beforerr /Users/zijin/.julia/dev/beforerr.jl/src/utils/makie.jl:34\n\n\n\n\n\n\n\nFigure 4",
    "crumbs": [
      "Home",
      "Notebooks",
      "Results"
    ]
  },
  {
    "objectID": "notebooks/10_results.html#anistropy",
    "href": "notebooks/10_results.html#anistropy",
    "title": "Results",
    "section": "Anistropy",
    "text": "Anistropy\nShen et al. (2024)\n\nplot_anistropy_comparison_2d(psp_df)\n\n┌ Info: Saved /Users/zijin/projects/psp_conjunction/figures/enc7/anisotropy_comparison_2d.png\n└ @ beforerr /Users/zijin/.julia/dev/beforerr.jl/src/utils/makie.jl:34\n\n\n\n\n\n\npsp_df.Λ_ion_r = abs.(psp_df.Λ_ion ./ psp_df.Λ_t .- 1)\nfirst(sort(psp_df, :Λ_ion_r), 4)\n\n\n4×91 DataFrame\n\n\n\nRow\ntime\ntstart\ntstop\nt.d_end\nt.d_start\nt.d_time\nindex_diff\nlen\nstd\nstd_prev\nstd_next\nindex_std\nindex_fluctuation\nB.after\nB.before\nb_mag\nb_n\nbn_over_b\nd_star\ndb_mag\ndb_over_b\ndb_over_b_max\nfit.stat.chisqr\nfit.stat.rsquared\nfit.vars.amplitude\nfit.vars.c\nfit.vars.sigma\nrotation_angle\ndB_x\ndB_y\ndB_z\ndB_lmn_x\ndB_lmn_y\ndB_lmn_z\nk_x\nk_y\nk_z\nVl_x\nVl_y\nVl_z\nVn_x\nVn_y\nVn_z\nduration\nplasma_density\nv_R\nv_T\nv_N\nn.before\nv_R_before\nv_T_before\nv_N_before\nn.after\nv_R_after\nv_T_after\nv_N_after\nv_l\nv_n\nv_k\nL_k\nj0_k\nion_inertial_length\nAlfven_speed\nj_Alfven\nL_k_norm\nj0_k_norm\nv.ion.before.l\nv.ion.after.l\nB.vec.before.l\nB.vec.before.m\nB.vec.before.n\nB.vec.after.l\nB.vec.after.m\nB.vec.after.n\nv.Alfven.before\nv.Alfven.after\nv.Alfven.before.l\nv.Alfven.after.l\nn.change\nv.ion.change.l\nB.change\nv.Alfven.change\nv.Alfven.change.l\nion_temp_para\nion_temp_perp\nΛ_ion\ndataset\nB.mean\nn.mean\nΛ_t\nΛ_ion_r\n\n\n\nDateTime\nDateTime\nDateTime\nDateTime\nDateTime\nDateTime\nFloat64\nUInt32\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat32\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat32\nFloat64\nFloat64\nFloat64\nFloat32\nFloat64\nFloat64\nFloat64\nFloat32\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat32\nFloat64\nFloat64\nFloat64\nFloat64\nFloat32\nFloat32\nFloat64\nString\nFloat64\nFloat32\nFloat64\nFloat64\n\n\n\n\n1\n2021-01-17T13:23:04\n2021-01-17T13:22:56\n2021-01-17T13:23:12\n2021-01-17T13:23:11.442\n2021-01-17T13:22:59.208\n2021-01-17T13:23:05.131\n0.648186\n73\n26.5526\n10.7862\n9.1192\n2.46173\n1.16665\n101.789\n44.0335\n75.0677\n2.27744\n0.0303385\n35.13\n57.7554\n0.769377\n0.769377\n2166.56\n0.936807\n50.5067\n3.45086\n0.359427\n38.8267\n55.2233\n-46.3511\n10.8783\n-64.0992\n-34.7455\n-0.648997\n0.0884341\n-0.12652\n-0.988014\n0.357252\n-0.921461\n0.152579\n-0.0675537\n0.13744\n0.988204\n0.718854\n2732.35\n381.362\n-138.215\n3.01064\n2762.37\n379.928\n-140.686\n3.44903\n2693.38\n377.506\n-133.004\n0.147888\n264.061\n41.7835\n48.2377\n34.6759\n579.538\n4.35666\n31.3158\n13709.1\n7.95929\n0.0422739\n265.893\n257.445\n0.353517\n44.0201\n1.0304\n64.4527\n78.7656\n1.6794\n18.2693\n42.7691\n0.146672\n27.0814\n-68.9861\n8.44747\n57.7554\n24.4998\n26.9347\n64.687\n57.5403\n0.73955\nParker Solar Probe\n72.9112\n2727.87\n0.901638\n0.179771\n\n\n2\n2021-01-17T14:00:48\n2021-01-17T14:00:40\n2021-01-17T14:00:56\n2021-01-17T14:00:53.754\n2021-01-17T14:00:47.855\n2021-01-17T14:00:47.086\n0.361529\n73\n31.854\n15.1253\n6.79863\n2.106\n1.44077\n136.929\n218.531\n155.794\n-5.14073\n-0.0329971\n12.1512\n-81.6016\n0.52378\n0.52378\n3746.21\n0.592843\n115.799\n-239.374\n2.38247\n7.16678\n80.6002\n-3.1367\n24.9029\n-84.416\n-0.564816\n-0.0287437\n-0.166979\n0.75391\n0.635404\n0.953005\n-0.0410342\n0.300163\n-0.128284\n0.842916\n0.522529\n4.76494\n3863.79\n394.834\n-209.22\n91.757\n3787.03\n386.74\n-202.149\n83.7244\n3771.57\n370.53\n-189.192\n63.788\n412.406\n179.06\n165.359\n787.925\n58.4764\n3.66366\n54.6539\n33833.3\n215.065\n0.00172837\n401.991\n380.027\n-213.71\n-45.1632\n-6.63765\n-129.294\n-44.5984\n-6.60891\n77.4356\n48.6197\n-75.7273\n-45.9086\n-15.4636\n21.9645\n-81.6016\n-28.8159\n29.8187\n62.6138\n39.6508\n0.565511\nParker Solar Probe\n177.73\n3779.3\n0.45742\n0.236305\n\n\n3\n2021-01-17T14:04:16\n2021-01-17T14:04:08\n2021-01-17T14:04:24\n2021-01-17T14:04:21.940\n2021-01-17T14:04:13.421\n2021-01-17T14:04:17.681\n0.929971\n73\n41.46\n17.2032\n14.9907\n2.41002\n1.25386\n117.341\n19.9397\n95.0441\n-10.1505\n-0.106798\n-27.2953\n97.4013\n1.0248\n1.0248\n37673.6\n0.0644105\n-132.883\n0.828218\n1.21708\n140.995\n130.362\n28.4358\n0.136201\n132.883\n10.212\n6.38537\n0.164659\n-0.75789\n0.631261\n-0.968391\n-0.233127\n-0.0887121\n-0.249287\n0.916793\n0.312005\n2.43417\n3671.34\n347.46\n-127.721\n-19.1184\n3696.02\n346.453\n-129.023\n-16.8507\n3632.13\n345.098\n-126.874\n-11.6083\n-305.006\n209.676\n141.942\n345.511\n153.027\n3.75845\n34.2051\n20119.9\n91.929\n0.00760574\n-303.929\n-303.582\n17.4386\n-4.63218\n-8.4872\n-115.444\n-14.8442\n-14.8726\n7.15205\n42.4568\n6.25492\n-41.7705\n-63.8911\n0.346474\n97.4013\n35.3048\n48.0254\n52.4148\n47.751\n0.731686\nParker Solar Probe\n68.6404\n3664.07\n0.999948\n0.268276\n\n\n4\n2021-01-17T14:02:56\n2021-01-17T14:02:48\n2021-01-17T14:03:04\n2021-01-17T14:03:02.860\n2021-01-17T14:02:49.097\n2021-01-17T14:02:58.196\n1.05036\n74\n55.3271\n9.25356\n17.6372\n3.13695\n3.12493\n52.3503\n174.84\n129.15\n-5.41188\n-0.0419039\n21.6793\n-122.489\n0.948429\n0.948429\n2701.74\n0.983496\n150.598\n-163.784\n1.73666\n51.8655\n131.82\n38.9729\n55.7669\n-148.222\n-3.76153\n-4.6396\n-0.101562\n0.912044\n-0.397316\n0.894607\n0.285819\n0.34349\n0.167674\n-0.927232\n0.334853\n3.47331\n3460.77\n327.214\n-132.42\n-14.7218\n3415.25\n321.447\n-133.69\n-18.1395\n3575.76\n352.967\n-131.117\n-14.4198\n249.823\n172.719\n148.156\n514.592\n116.444\n3.87111\n47.8724\n26544.1\n132.931\n0.00438681\n243.127\n273.338\n-168.928\n44.0778\n-9.45836\n-20.7057\n47.8393\n-4.81877\n65.2389\n19.0903\n-63.033\n-7.55065\n160.513\n30.2113\n-122.489\n-46.1486\n55.4823\n63.3292\n46.3322\n0.9178\nParker Solar Probe\n113.595\n3495.51\n0.703496\n0.304626\n\n\n\n\n\n\n\n\nplot_anistropy(df)\n\n┌ Info: Saved /Users/zijin/projects/psp_conjunction/notebooks/figures/anisotropy.spi_n_spi.png\n└ @ beforerr /Users/zijin/.julia/dev/beforerr.jl/src/utils/makie.jl:34\n\n\n\n\n\n\nplot_anistropy_theory(df)\n\n┌ Info: Saved /Users/zijin/projects/psp_conjunction/figures/enc7/anisotropy_theory.png\n└ @ beforerr /Users/zijin/.julia/dev/beforerr.jl/src/utils/makie.jl:34\n\n\n\n\n\n\n\nFigure 5\n\n\n\n\n\nfunction plot_anistropy_comparison()\n    fname = \"anisotropy_comparison\"\n\n    fig = Figure(size=(1000, 800))\n\n    plt_Λ = data(\n        stack(earth_df, [:Λ, :Λ_t, :Λ_ion, :Λ_e], [:time, :dataset])\n    ) * mapping(:value =&gt; L\"\\Lambda\", color=:variable, marker=:variable, col=:dataset)\n\n    grid1 = plt_Λ * density() |&gt; draw!$fig[1, 1:2]\n    grid2 = plt_Λ * histogram() |&gt; draw!$fig[2, 1:2]\n    # easy_save(\"$(fname)_$psp_p_instr\")\n    # legend!(fig[1, 1:2], grid, titleposition=:left, orientation=:horizontal)\n    pretty_legend!(fig, grid1)\n\n    fig\nend\n\nfunction plot_anistropy_comparison_i_e()\n    fname = \"anisotropy_comparison_i_e\"\n\n    mapping_layer = mapping(\n        Λ_e_map, Λ_ion_map,\n    )\n\n    # draw a dashed line with slope 1\n    df2 = (Λ_e=[0, 0.3], Λ_ion=[0, 0.3])\n\n    plt = (data(earth_df) * mapping(row=:dataset) + data(df2) * visual(Lines)) * mapping_layer\n\n    fig = draw(plt, facet=(; linkxaxes=:minimal, linkyaxes=:minimal))\n    fig\nend\n\nplot_anistropy_comparison_i_e (generic function with 1 method)\n\n\n\nplot_anistropy_comparison()\n\n\n\n\n\n\nFigure 6\n\n\n\n\n\n\n\nplot_anistropy_comparison_2d()\n\nMethodError: MethodError: no method matching plot_anistropy_comparison_2d()\n\nClosest candidates are:\n  plot_anistropy_comparison_2d(!Matched::Any)\n   @ Main ~/projects/psp_conjunction/notebooks/utils/anisotry.jl:11\n\n\n\nFigure 7\n\n\n\n\nplot_anistropy_comparison_i_e()\n\n\n\n\n\n\nFigure 8",
    "crumbs": [
      "Home",
      "Notebooks",
      "Results"
    ]
  },
  {
    "objectID": "notebooks/events/e7.html",
    "href": "notebooks/events/e7.html",
    "title": "Encounter 7 (2021-01-17)",
    "section": "",
    "text": "Encounter 7 (2021-01-17)\n\nWHPI - Campaign: PSP 7th Perhihelion\nENLIL Solar Wind Prediction - Parker Solar Probe - Perihelion 04\n\n\nE7 and Q3, 14–18 January, 2021.\nDuring this interval, STEREO-A, Earth, and SO will provide 360◦ coverage of the heliosphere, and just before E7, on 14 January, 2021, PSP will be in conjunction with STEREO-A, followed by conjunction with Earth on 16, E7 on 17, and quadrature Q3 on the east limb (trailing) with SO on 18 January, 2021. Synergies here arise mostly from potential remote-sensing measurements from SO and STEREO-A and from assets on the PSP–Earth line (SDO, Hinode) and ground-based instrumentation.\n\n\nThe seventh encounter of Parker Solar Probe provides observations down to 0.09 au (20.3 RS). Because of the favorable alignment between Parker and Earth, the Parker mission has teamed with theWhole Heliosphere and Planetary Interactions (WHPI) group to orgnanize another multi-observatory campaign similar to the fourth encounter of Parker. From 2021 January 10 - 20, Parker footpoint predictions will be issued on a daily basis to the community.\n\nhttps://psp-gateway.jhuapl.edu/website/SciencePlanning/Encounters/E7_ParkerSpiral_mapping.png\n\nDuring the 7th PSP perihelion passage (January 17, 2021) the Earth and many space observatories were near-radially aligned with PSP, and STEREO A was along the Parker spiral from PSP.\n\n\n\nStart Date: 20210114 End Date: 20210121\nfile:///Users/zijin/projects/autoplot/scripts/psp_mag_sw.vap?timerange=2021-01-14+through+2021-01-21\nfile:///Users/zijin/projects/autoplot/scripts/ace.vap?timerange=2021-01-15+through+2021-01-22\nfile:///Users/zijin/projects/autoplot/scripts/ace.vap?timerange=2019-04-11+through+2019-04-14\nfile:///Users/zijin/projects/autoplot/scripts/wind_plasma.vap?timerange=2019-04-08+through+2019-04-10\nfile:///Users/zijin/projects/autoplot/scripts/dscovr.vap?timerange=2019-04-08+through+2019-04-10",
    "crumbs": [
      "Home",
      "Notebooks",
      "Events",
      "Encounter 7 (2021-01-17)"
    ]
  },
  {
    "objectID": "notebooks/events/e11.html",
    "href": "notebooks/events/e11.html",
    "title": "Encounter 11",
    "section": "",
    "text": "Encounter 11\n\nPerihelion: 2022-02-25T15:38\n\n\nE11, C6, Q8, Q9 23–27 February, 2022. PSP approaches encounter E11 beginning with a trailing quadrature Q8 on 23 February, 2022, appearing on the east limb of the Sun from SO, before rapidly going through conjunction with STEREO-A and then SO and Earth (24 and 25 February, respectively) at perihe- lion with the Earth–Sun–STEREO-A angle ’40◦ and the Earth– Sun–SO angle decreasing from ’15◦ to 0◦ on 7 March, 2022, with SO at 0.5 AU. There will be clear opportunities here for cross calibration of magnetic ﬁeld measurements, as well as a true stereoscopic reconstruction of the solar corona crossed by PSP, with opportunities for all the PSP–SO objectives.\n\n\nThe eleventh encounter of Parker Solar Probe provides observations down to 0.062 au (13.3 RS). Since the footpoints of Parker will be visible from Earth when it is near perihelion, the Parker team has again partnered with the Whole Heliosphere and Planetary Interactions (WHPI) group to coordinate remote observing during this encounter. The first footpoint prediction will be issued on February 18th followed by daily updates form February 21st through 28th, 2022. For more information, please contact Robert C. Allen (Robert.Allen@jhuapl.edu), the Parker Project Science team coordinator for this effort and visit theWHPI page for this campaign.\n\n\n\n\nfile:///Users/zijin/projects/autoplot/scripts/psp_mag_sw.vap?timerange=2022-02-22+through+2022-03-01\nfile:///Users/zijin/projects/autoplot/scripts/ace.vap?timerange=2022-02-23+through+2022-03-02\n\n\nPerihelion: 2021-04-29\nStart Date: 20210426 End Date: 20210503\nWHPI - Campaign: PSP 8th Perhihelion\n\n\nUsing a nominal 400 km/s solar wind velocity, the following figures show the ballistic mapping in a helioprojective and heliographic frame, followed by an ecliptic view of the trajectory in the frame rotating with the Earth. Several Parker spirals are drawn, showing the possible magnetic connection to the Earth near May 9th.\n\n\nE8, C2, Q4, Q5, 24 April–1 May, 2021. Throughout this period SO will be in quadrature with Earth, appearing from Earth on the solar east limb. In rapid succession over E8, PSP will appear in quadrature from SO on the east limb (trailing), then in conjunction with SO at perihelion on 28 April, with PSP at a distance of 15.5RS, then in conjunction with STEREO-A on 29 April and with Earth on 30 April. STEREO-A will be positioned trailing Earth by 45◦ midway to SO in longitude. This PSP encounter is extremely favorable to a potential joint in situ–remote-sensing campaign comprising PSP, SO, STEREOA, SDO, Hinode, and ground-based instrumentation.\n\n\nStart Date: 20210426 End Date: 20210503\nfile:///Users/zijin/projects/autoplot/scripts/psp_mag_sw.vap?timerange=2021-04-26+through+2021-05-03\nfile:///Users/zijin/projects/autoplot/scripts/ace.vap?timerange=2021-04-27+through+2021-05-04\n\n\n\nfile:///Users/zijin/projects/autoplot/scripts/ace.vap?timerange=2019-04-11+through+2019-04-14\nfile:///Users/zijin/projects/autoplot/scripts/wind_plasma.vap?timerange=2019-04-08+through+2019-04-10\nfile:///Users/zijin/projects/autoplot/scripts/dscovr.vap?timerange=2019-04-08+through+2019-04-10",
    "crumbs": [
      "Home",
      "Notebooks",
      "Events",
      "Encounter 11"
    ]
  },
  {
    "objectID": "notebooks/events/e8.html",
    "href": "notebooks/events/e8.html",
    "title": "Encounter 8",
    "section": "",
    "text": "Encounter 8\n\nPerihelion: 2021-04-29\nStart Date: 20210426 End Date: 20210503\n\n\n\n\nWHPI - Campaign: PSP 8th Perhihelion\n\n\nUsing a nominal 400 km/s solar wind velocity, the following figures show the ballistic mapping in a helioprojective and heliographic frame, followed by an ecliptic view of the trajectory in the frame rotating with the Earth. Several Parker spirals are drawn, showing the possible magnetic connection to the Earth near May 9th.\n\n\nE8, C2, Q4, Q5, 24 April–1 May, 2021. Throughout this period SO will be in quadrature with Earth, appearing from Earth on the solar east limb. In rapid succession over E8, PSP will appear in quadrature from SO on the east limb (trailing), then in conjunction with SO at perihelion on 28 April, with PSP at a distance of 15.5RS, then in conjunction with STEREO-A on 29 April and with Earth on 30 April. STEREO-A will be positioned trailing Earth by 45◦ midway to SO in longitude. This PSP encounter is extremely favorable to a potential joint in situ–remote-sensing campaign comprising PSP, SO, STEREOA, SDO, Hinode, and ground-based instrumentation.\n\n\nStart Date: 20210426 End Date: 20210503\nfile:///Users/zijin/projects/autoplot/scripts/psp_mag_sw.vap?timerange=2021-04-26+through+2021-05-03\nfile:///Users/zijin/projects/autoplot/scripts/ace.vap?timerange=2021-04-27+through+2021-05-04\n\n\n\nfile:///Users/zijin/projects/autoplot/scripts/ace.vap?timerange=2019-04-11+through+2019-04-14\nfile:///Users/zijin/projects/autoplot/scripts/wind_plasma.vap?timerange=2019-04-08+through+2019-04-10\nfile:///Users/zijin/projects/autoplot/scripts/dscovr.vap?timerange=2019-04-08+through+2019-04-10",
    "crumbs": [
      "Home",
      "Notebooks",
      "Events",
      "Encounter 8"
    ]
  },
  {
    "objectID": "notebooks/01_psp_overview.html",
    "href": "notebooks/01_psp_overview.html",
    "title": "Overview of the event",
    "section": "",
    "text": "We are using PSP_SWP_SPI_SF00_L3_MOM dataset\nDSCOVR_H1_FC/Np outside of its definition range &lt;DateTimeRange: 2016-06-03T00:00:00+00:00 -&gt; 2019-06-27T23:58:59+00:00&gt;\n# hvplot.extension('bokeh', 'matplotlib')\n# hvplot.output(backend='matplotlib', fig='svg')\npsp_dataset = \"PSP_SWP_SPI_SF00_L3_MOM\"\npsp_parameters = [\"DENS\", \"VEL_RTN_SUN\", \"TEMP\", \"MAGF_SC\", \"SUN_DIST\"]\n# Encounter 2\npsp_start = \"2019-04-07T01:00\"\npsp_end = \"2019-04-07T09:00\"\n\nearth_start = \"2019-04-09\"\nearth_end = \"2019-04-14\"\n\nevery = timedelta(minutes=4)\n\nmission = 'Wind'\n# mission = \"DSCOVR\"\n\nfname = f\"../figures/evolution/plasma-adiabatic-evolution_e2-{mission}\"\n# # Encounter 4\n# psp_start = '2020-01-27'\n# psp_end = '2020-01-29'\n\n# earth_start = '2020-01-29'\n# earth_end = '2020-01-31'\n\n# every = timedelta(minutes=4)\n\n# mission = 'Wind'\n\n# fname = f\"../figures/evolution/plasma-adiabatic-evolution_e4-{mission}\"\npsp_timerange = TimeRange(psp_start, psp_end)\n\nearth_timerange = TimeRange(earth_start, earth_end)\nmatch mission.lower():\n    case \"dscovr\":\n        e_mag_dataset = \"DSCOVR_H0_MAG\"\n        e_mag_parameters = [\"B1F1\"]\n        e_plasma_dataset = \"DSCOVR_H1_FC\"\n        e_plasma_parameters = [\"Np\", \"V_GSE\", \"THERMAL_TEMP\"]\n    case \"wind\":\n        e_mag_dataset = \"WI_K0_MFI\"\n        e_mag_parameters = [\"BF1\"]\n        e_plasma_dataset = \"WI_K0_SWE\"\n        e_plasma_parameters = [\"Np\", \"V_GSM\", \"THERMAL_SPD\"]\ndef validate(timerange):\n    if isinstance(timerange, TimeRange):\n        return [timerange.start.to_string(), timerange.end.to_string()]\npsp_plasma_vars = Variables(\n    dataset=psp_dataset, parameters=psp_parameters, timerange=validate(psp_timerange)\n).retrieve_data()\n\nvec_cols = psp_plasma_vars.data[1].columns\npsp_mag_cols = psp_plasma_vars.data[3].columns\ndef preview(products: list[str]):\n    vars = Variables(\n        products=products,\n        timerange=validate(earth_timerange)\n    ).retrieve_data()\n\n\n    fig, axes = plt.subplots(2)\n    vars.data[0].replace_fillval_by_nan().plot(ax=axes[0])\n    vars.data[1].replace_fillval_by_nan().plot(ax=axes[1])\n    \n    return fig, axes\n\n# preview([\"cda/DSCOVR_H1_FC/THERMAL_TEMP\", \"cda/WI_K0_SWE/THERMAL_SPD\"])\n# preview([\"cda/DSCOVR_H0_MAG/B1F1\", \"cda/WI_K0_MFI/BF1\"])\nvars = Variables(\n    products=[\"cda/DSCOVR_H1_FC/THERMAL_TEMP\", \"cda/WI_K0_SWE/THERMAL_SPD\"],\n    timerange=validate(earth_timerange)\n).retrieve_data()",
    "crumbs": [
      "Home",
      "Notebooks",
      "Overview of the event"
    ]
  },
  {
    "objectID": "notebooks/01_psp_overview.html#radial-evolution-of-the-coronal-hole-high-speed-streams",
    "href": "notebooks/01_psp_overview.html#radial-evolution-of-the-coronal-hole-high-speed-streams",
    "title": "Overview of the event",
    "section": "Radial evolution of the coronal hole high-speed streams",
    "text": "Radial evolution of the coronal hole high-speed streams\nPerrone et al. (2019) used HELIOS observations to study the radial evolution of the solar wind in coronal hole high-speed streams. They found that The radial dependence of the proton number density, np, and the magnetic field, B, is given by\nThe radial dependence of the proton number density, np is\n\\[n_p = (2.4 ± 0.1)(R/R_0)^{−(1.96±0.07)} cm^{−3}\\]\n\\[B = (5.7 ± 0.2)(R/R_0)^{−(1.59±0.06)} nT\\]\nThe faster decrease of the magnetic than kinetic pressure is reﬂected in the radial proton plasma beta variation\n\\[β_p = P_k/P_B = (0.55 ± 0.04)(R/R_0)^{(0.4±0.1)}.\\]\nThe behaviour of the parallel proton plasma beta is similar\n\\[β_{‖} = (0.37 ± 0.03)(R/R_0)^{(0.8±0.1)}\\]\n\nimport astropy.units as u\nfrom astropy.constants import m_p\n\n\ndef plasma_r_evolution(\n    df: pl.DataFrame,\n    alpha_beta_r = 0.4,\n    alpha_beta_parallel_r = 0.9,\n    alpha_n = -2,\n    alpha_B = -1.63,\n    alpha_plasma_speed = 0,\n):\n    return df.with_columns(\n        plasma_speed_1AU = pl.col('plasma_speed') * (1 / pl.col(\"distance2sun\"))**alpha_plasma_speed,\n        n_1AU = pl.col('n') * (1 / pl.col(\"distance2sun\"))**alpha_n,\n        B_1AU = pl.col('B') * (1 / pl.col(\"distance2sun\"))**alpha_B,\n        beta_1AU = pl.col(\"beta\") * (1 / pl.col(\"distance2sun\"))**alpha_beta_r,\n        beta_parallel = pl.col(\"beta\") * (1 / pl.col(\"distance2sun\"))**alpha_beta_parallel_r,\n    )\n\n\nkm2au = u.km.to(u.AU)\n\n\npsp_plasma_r = (\n    psp_plasma_vars.to_polars().pipe(resample, every)\n    .with_columns(\n        B=pl_norm(psp_mag_cols),\n        plasma_speed = pl_norm(vec_cols),\n        distance2sun = pl.col('Sun Distance') * km2au,\n    )\n    .rename(\n        {\n            \"Density\": \"n\",\n            \"Temperature\": \"T\",\n        }\n    )\n    .collect()\n    .pipe(df_beta)\n    .pipe(plasma_r_evolution)\n    .pipe(df_Alfven_speed)\n    .pipe(df_Alfven_speed, B = \"B_1AU\", n = \"n_1AU\", col_name = \"Alfven_speed_1AU\")\n    .with_columns(\n        plasma_speed_over_Alfven_speed = pl.col(\"plasma_speed\") / pl.col(\"Alfven_speed\"),\n        plasma_speed_over_Alfven_speed_1AU = pl.col(\"plasma_speed_1AU\") / pl.col(\"Alfven_speed_1AU\"),\n    )\n)\n\n\ndef thermal_spd2temp(speed, speed_unit=u.km / u.s):\n    return (m_p * (speed * speed_unit) ** 2 / 2).to(\"eV\").value\n\n\ndef df_thermal_spd2temp(\n    ldf: pl.LazyFrame,\n    speed_col,\n    speed_unit=u.km / u.s,\n    name=\"plasma_temperature\",\n    temp_unit=u.eV,\n):\n    df = ldf.collect()\n    temp = thermal_spd2temp(df[speed_col].to_numpy(), speed_unit)\n    return df.with_columns(pl.Series(temp).alias(name)).lazy()\n\n\ndef process(\n    timerange,\n    mag_dataset: str,\n    mag_parameters: list[str],\n    plasma_dataset: str,\n    plasma_parameters: list[str],\n):\n    timerange = validate(timerange)\n\n    mag_vars = Variables(\n        dataset=mag_dataset,\n        parameters=mag_parameters,\n        timerange=timerange,\n    ).retrieve_data()\n\n    plasma_vars = Variables(\n        dataset=plasma_dataset,\n        parameters=plasma_parameters,\n        timerange=timerange,\n    ).retrieve_data()\n\n    temp_vars = plasma_vars.data[2]\n\n    density_col = plasma_vars.data[0].columns[0]\n    vec_cols = plasma_vars.data[1].columns\n    temp_col = temp_vars.columns[0]\n    mag_col = mag_vars.data[0].columns[0]\n\n    plasma_data = (\n        plasma_vars.to_polars()\n        .with_columns(plasma_speed=pl_norm(vec_cols))\n        .rename({density_col: \"n\"})\n    ).pipe(resample, every)\n    # process temperature data\n\n    if temp_vars.unit == \"km/s\":\n        plasma_data = plasma_data.pipe(df_thermal_spd2temp, temp_col, name=\"T\")\n        T_unit = u.eV\n    else:\n        plasma_data = plasma_data.rename({temp_col: \"T\"})\n        if temp_vars.unit.startswith(\"K\"):\n            T_unit = u.K\n\n    mag_data = mag_vars.to_polars().pipe(resample, every).rename({mag_col: \"B\"})\n\n    df = (\n        plasma_data.sort(\"time\")\n        .join_asof(mag_data.sort(\"time\"), on=\"time\")\n        .collect()\n        .pipe(df_beta, T_unit=T_unit)\n        .pipe(df_Alfven_speed)\n        .with_columns(\n            plasma_speed_over_Alfven_speed=pl.col(\"plasma_speed\")\n            / pl.col(\"Alfven_speed\"),\n        )\n    )\n    return df\n\n\nfrom copy import deepcopy\n\n\nfunc = partial(\n    process,\n    mag_dataset=e_mag_dataset,\n    mag_parameters=e_mag_parameters,\n    plasma_dataset=e_plasma_dataset,\n    plasma_parameters=e_plasma_parameters,\n)\n\n\ne_df_previous = func(deepcopy(earth_timerange).previous())\ne_df = func(earth_timerange)\ne_df_next = func(deepcopy(earth_timerange).next())\n\n\nplot = psp_plasma_r.plot(x=\"time\", y=[\"plasma_speed\", \"beta\", \"Alfven_speed\", \"plasma_speed_over_Alfven_speed\"], subplots=True, shared_axes=False).cols(1)\n\nplot_1AU = psp_plasma_r.plot(x=\"time\", y=[\"plasma_speed_1AU\", \"beta_1AU\", \"Alfven_speed_1AU\", \"plasma_speed_over_Alfven_speed_1AU\"], subplots=True, shared_axes=False).cols(1)\n\nplot + plot_1AU\n\nCannot render NdLayout nested inside a Layout\n\n\n:Layout\n   .NdLayout.I  :NdLayout   [Variable]\n      :Curve   [time]   (value)\n   .NdLayout.II :NdLayout   [Variable]\n      :Curve   [time]   (value)\n\n\n\ndef compare_df(df1, df2):\n    df1_plot = df1.plot.scatter(\n        x=\"beta\", y=\"plasma_speed_over_Alfven_speed\", label=\"PSP\"\n    ) * df1.plot.scatter(\n        x=\"beta_1AU\",\n        y=\"plasma_speed_over_Alfven_speed_1AU\",\n        label=\"PSP (1AU predicted)\",\n    )\n\n    df2_plot = df2.plot.scatter(\n        x=\"beta\",\n        y=\"plasma_speed_over_Alfven_speed\",\n        label=mission,\n        alpha=0.2,\n    )\n\n    xlabel = \"Plasma beta\"\n    # ylabel=r\"$v_i$ / $v_A$\"\n    ylabel = \"Plasma speed over Alfven speed\"\n    title = \"Plasma speed over Alfven speed vs plasma beta\"\n\n    return (df2_plot * df1_plot).opts(xlabel=xlabel, ylabel=ylabel, logx=True, logy=True)\n\n\nhvplot.extension('bokeh', 'matplotlib')\nhvplot.output(backend='matplotlib', fig='svg')\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\nfig = compare_df(psp_plasma_r, e_df_previous).opts(title=\"Previous Period\")\nhvplot.save(fig, fname + \"-previous\", fmt=\"svg\")\n# hvplot.save(fig, fname + \"-previous.svg\")\n\n\nfig = compare_df(psp_plasma_r, e_df).opts(title=\"Current Period\")\nhvplot.save(fig, fname, fmt=\"svg\")\n\n\nfig = compare_df(psp_plasma_r, e_df_next).opts(title=\"Next Period\")\nhvplot.save(fig, fname + \"-next\", fmt=\"svg\")",
    "crumbs": [
      "Home",
      "Notebooks",
      "Overview of the event"
    ]
  },
  {
    "objectID": "notebooks/01_psp_overview.html#datetime-slider",
    "href": "notebooks/01_psp_overview.html#datetime-slider",
    "title": "Overview of the event",
    "section": "Datetime slider",
    "text": "Datetime slider\n\nimport panel as pn\n\n\ndatetime_range_slider = pn.widgets.DatetimeRangeSlider(\n    name='Datetime Range Slider',\n    start=datetime(2017, 1, 1), end=datetime(2019, 1, 1),\n    value=(datetime(2017, 1, 1), datetime(2018, 1, 10)),\n    step=10000\n)\n\ndatetime_range_slider",
    "crumbs": [
      "Home",
      "Notebooks",
      "Overview of the event"
    ]
  },
  {
    "objectID": "notebooks/01_psp_cor.html",
    "href": "notebooks/01_psp_cor.html",
    "title": "Time series correlation",
    "section": "",
    "text": "import pyspedas\nfrom pytplot import tplot, get_data\nfrom pyspedas import tinterp\nfrom pyspedas.analysis.tvectot import tvectot\nimport matplotlib.pyplot as plt\n\nimport xarray as xr\nimport polars as pl\nimport polars.selectors as cs\n\nimport hvplot.polars\n\nimport scipy.stats\nimport dcor\n\nimport astropy.units as u\nfrom datetimerange import DateTimeRange\nfrom sunpy.time import TimeRange\nfrom numpy import timedelta64\nfrom datetime import datetime, timedelta\n# start = '2019-04-06T12:00'\n# end = '2019-04-07T12:00'\n\n# earth_start = '2019-04-09'\n# earth_end = '2019-04-14'\npsp_timerange = TimeRange(start, end)\n\ntimerange_earth = TimeRange(earth_start, earth_end)\ndef validate(timerange):\n    if isinstance(timerange, DateTimeRange):\n        return [timerange.get_start_time_str(), timerange.get_end_time_str()]\n    if isinstance(timerange, TimeRange):\n        return [timerange.start.to_string(), timerange.end.to_string()]",
    "crumbs": [
      "Home",
      "Notebooks",
      "Time series correlation"
    ]
  },
  {
    "objectID": "notebooks/01_psp_cor.html#estimate-of-arrival-time",
    "href": "notebooks/01_psp_cor.html#estimate-of-arrival-time",
    "title": "Time series correlation",
    "section": "Estimate of arrival time",
    "text": "Estimate of arrival time\n\npsp_spi_vars = pyspedas.psp.spi(trange=validate(psp_timerange), time_clip=True)\n\ntvar = tvectot(\"psp_spi_VEL_RTN_SUN\")\npsp_ion_speed: xr.DataArray = get_data(tvar, xarray=True)\n\nr_psp = get_data('psp_spi_SUN_DIST', xarray=True)\n# r_psp = pl.DataFrame(r_psp.to_dataframe().reset_index())\n\n27-Mar-24 07:53:23: Downloading remote index: https://spdf.gsfc.nasa.gov/pub/data/psp/sweap/spi/l3/spi_sf00_l3_mom/2021/\n\n\nUsing LEVEL=L3\n\n\n27-Mar-24 07:53:24: Downloading https://spdf.gsfc.nasa.gov/pub/data/psp/sweap/spi/l3/spi_sf00_l3_mom/2021/psp_swp_spi_sf00_l3_mom_20210117_v04.cdf to /Users/zijin/data/psp/sweap/spi/l3/spi_sf00_l3_mom/2021/psp_swp_spi_sf00_l3_mom_20210117_v04.cdf\n27-Mar-24 07:53:27: Download complete: /Users/zijin/data/psp/sweap/spi/l3/spi_sf00_l3_mom/2021/psp_swp_spi_sf00_l3_mom_20210117_v04.cdf\n\n\nTypeError: 'CDFInfo' object is not subscriptable\n\n\n\ndf_info = pl.DataFrame(r_psp.to_dataframe().join(psp_ion_speed.to_dataframe()).reset_index())\n\nNameError: name 'r_psp' is not defined\n\n\n\nkm2au = u.km.to(u.AU)\nr_earth = 1 * u.AU.to(u.km)\nv_sw_slow = 250 * u.km / u.s\nv_sw_fast = 500 * u.km / u.s\n\ndf_info.sort('time').group_by_dynamic('time', every='1h').agg(cs.float().mean()).with_columns(\n    distance2sun = pl.col('psp_spi_SUN_DIST'),\n    distance2earth = r_earth - pl.col('psp_spi_SUN_DIST')\n).with_columns(\n    dt2arrival = pl.duration(seconds = pl.col('distance2earth') / pl.col('psp_spi_VEL_RTN_SUN_tot')),\n    dt2arrival_slow = pl.duration(seconds = pl.col('distance2earth') / v_sw_slow),\n    dt2arrival_fast = pl.duration(seconds = pl.col('distance2earth') / v_sw_fast)\n).with_columns(\n    time2arrival = pl.col('time') + pl.col('dt2arrival'),\n    time2arrival_slow = pl.col('time') + pl.col('dt2arrival_slow'),\n    time2arrival_fast = pl.col('time') + pl.col('dt2arrival_fast')\n).with_columns(\n    distance2sun = pl.col('distance2sun') * km2au,\n    distance2earth = pl.col('distance2earth') * km2au\n)\n\n\n\nshape: (24, 11)\n\n\n\ntime\npsp_spi_SUN_DIST\npsp_spi_VEL_RTN_SUN_tot\ndistance2sun\ndistance2earth\ndt2arrival\ndt2arrival_slow\ndt2arrival_fast\ntime2arrival\ntime2arrival_slow\ntime2arrival_fast\n\n\ndatetime[ns]\nf64\nf32\nf64\nf64\nduration[μs]\nduration[μs]\nduration[μs]\ndatetime[μs]\ndatetime[μs]\ndatetime[μs]\n\n\n\n\n2019-04-06 12:00:00\n2.6162e7\n289.611786\n0.174885\n0.825115\n4d 22h 23m 30s\n5d 17h 9m 1s\n2d 20h 34m 30s\n2019-04-11 10:23:30\n2019-04-12 05:09:01\n2019-04-09 08:34:30\n\n\n2019-04-06 13:00:00\n2.6231e7\n273.515167\n0.175347\n0.824653\n5d 5h 17m 20s\n5d 17h 4m 25s\n2d 20h 32m 12s\n2019-04-11 18:17:20\n2019-04-12 06:04:25\n2019-04-09 09:32:12\n\n\n2019-04-06 14:00:00\n2.6302e7\n255.006729\n0.175819\n0.824181\n5d 14h 18m 20s\n5d 16h 59m 43s\n2d 20h 29m 51s\n2019-04-12 04:18:20\n2019-04-12 06:59:43\n2019-04-09 10:29:51\n\n\n2019-04-06 15:00:00\n2.6374e7\n243.91748\n0.1763\n0.8237\n5d 20h 19m 46s\n5d 16h 54m 55s\n2d 20h 27m 27s\n2019-04-12 11:19:46\n2019-04-12 07:54:55\n2019-04-09 11:27:27\n\n\n2019-04-06 16:00:00\n2.6448e7\n244.805847\n0.176796\n0.823204\n5d 19h 44m 9s\n5d 16h 49m 58s\n2d 20h 24m 59s\n2019-04-12 11:44:09\n2019-04-12 08:49:58\n2019-04-09 12:24:59\n\n\n2019-04-06 17:00:00\n2.6523e7\n232.988617\n0.177294\n0.822706\n6d 2h 44m 4s\n5d 16h 45m\n2d 20h 22m 30s\n2019-04-12 19:44:04\n2019-04-12 09:45:00\n2019-04-09 13:22:30\n\n\n2019-04-06 18:00:00\n2.6599e7\n224.188614\n0.177805\n0.822195\n6d 8h 23m 58s\n5d 16h 39m 54s\n2d 20h 19m 57s\n2019-04-13 02:23:58\n2019-04-12 10:39:54\n2019-04-09 14:19:57\n\n\n2019-04-06 19:00:00\n2.6677e7\n222.26709\n0.178326\n0.821674\n6d 9h 37m 11s\n5d 16h 34m 42s\n2d 20h 17m 21s\n2019-04-13 04:37:11\n2019-04-12 11:34:42\n2019-04-09 15:17:21\n\n\n2019-04-06 20:00:00\n2.6757e7\n234.130203\n0.178857\n0.821143\n6d 1h 44m 30s\n5d 16h 29m 25s\n2d 20h 14m 42s\n2019-04-12 21:44:30\n2019-04-12 12:29:25\n2019-04-09 16:14:42\n\n\n2019-04-06 21:00:00\n2.6837e7\n237.631592\n0.179396\n0.820604\n5d 23h 30m\n5d 16h 24m 2s\n2d 20h 12m 1s\n2019-04-12 20:30:00\n2019-04-12 13:24:02\n2019-04-09 17:12:01\n\n\n2019-04-06 22:00:00\n2.6919e7\n307.80896\n0.179945\n0.820055\n4d 14h 42m 34s\n5d 16h 18m 34s\n2d 20h 9m 17s\n2019-04-11 12:42:34\n2019-04-12 14:18:34\n2019-04-09 18:09:17\n\n\n2019-04-06 23:00:00\n2.7003e7\n344.912201\n0.180502\n0.819498\n4d 2h 43m 58s\n5d 16h 13m\n2d 20h 6m 30s\n2019-04-11 01:43:58\n2019-04-12 15:13:00\n2019-04-09 19:06:30\n\n\n2019-04-07 00:00:00\n2.7087e7\n355.850494\n0.181069\n0.818931\n3d 23h 37m 54s\n5d 16h 7m 21s\n2d 20h 3m 40s\n2019-04-10 23:37:54\n2019-04-12 16:07:21\n2019-04-09 20:03:40\n\n\n2019-04-07 01:00:00\n2.7174e7\n392.575317\n0.181644\n0.818356\n3d 14h 37m 29s\n5d 16h 1m 37s\n2d 20h 48s\n2019-04-10 15:37:29\n2019-04-12 17:01:37\n2019-04-09 21:00:48\n\n\n2019-04-07 02:00:00\n2.7261e7\n362.412781\n0.182228\n0.817772\n3d 21h 46m 2s\n5d 15h 55m 47s\n2d 19h 57m 53s\n2019-04-10 23:46:02\n2019-04-12 17:55:47\n2019-04-09 21:57:53\n\n\n2019-04-07 03:00:00\n2.7349e7\n379.650299\n0.182819\n0.817181\n3d 17h 26m 42s\n5d 15h 49m 53s\n2d 19h 54m 56s\n2019-04-10 20:26:42\n2019-04-12 18:49:53\n2019-04-09 22:54:56\n\n\n2019-04-07 04:00:00\n2.7440e7\n395.427307\n0.183425\n0.816575\n3d 13h 48m 46s\n5d 15h 43m 51s\n2d 19h 51m 55s\n2019-04-10 17:48:46\n2019-04-12 19:43:51\n2019-04-09 23:51:55\n\n\n2019-04-07 05:00:00\n2.7530e7\n390.717957\n0.184029\n0.815971\n3d 14h 46m 58s\n5d 15h 37m 49s\n2d 19h 48m 54s\n2019-04-10 19:46:58\n2019-04-12 20:37:49\n2019-04-10 00:48:54\n\n\n2019-04-07 06:00:00\n2.7623e7\n403.930115\n0.184646\n0.815354\n3d 11h 52m 51s\n5d 15h 31m 40s\n2d 19h 45m 50s\n2019-04-10 17:52:51\n2019-04-12 21:31:40\n2019-04-10 01:45:50\n\n\n2019-04-07 07:00:00\n2.7716e7\n413.059479\n0.185271\n0.814729\n3d 9h 57m 50s\n5d 15h 25m 26s\n2d 19h 42m 43s\n2019-04-10 16:57:50\n2019-04-12 22:25:26\n2019-04-10 02:42:43\n\n\n2019-04-07 08:00:00\n2.7811e7\n388.398651\n0.185904\n0.814096\n3d 15h 6m 2s\n5d 15h 19m 8s\n2d 19h 39m 34s\n2019-04-10 23:06:02\n2019-04-12 23:19:08\n2019-04-10 03:39:34\n\n\n2019-04-07 09:00:00\n2.7907e7\n369.630157\n0.186544\n0.813456\n3d 19h 27m 4s\n5d 15h 12m 45s\n2d 19h 36m 22s\n2019-04-11 04:27:04\n2019-04-13 00:12:45\n2019-04-10 04:36:22\n\n\n2019-04-07 10:00:00\n2.8003e7\n330.248749\n0.187192\n0.812808\n4d 6h 16m 30s\n5d 15h 6m 17s\n2d 19h 33m 8s\n2019-04-11 16:16:30\n2019-04-13 01:06:17\n2019-04-10 05:33:08\n\n\n2019-04-07 11:00:00\n2.8102e7\n299.601105\n0.187847\n0.812153\n4d 16h 38m 47s\n5d 14h 59m 45s\n2d 19h 29m 52s\n2019-04-12 03:38:47\n2019-04-13 01:59:45\n2019-04-10 06:29:52",
    "crumbs": [
      "Home",
      "Notebooks",
      "Time series correlation"
    ]
  },
  {
    "objectID": "notebooks/01_psp_cor.html#get-velocity",
    "href": "notebooks/01_psp_cor.html#get-velocity",
    "title": "Time series correlation",
    "section": "Get velocity",
    "text": "Get velocity\n\npsp_spi_vars = pyspedas.psp.spi(trange=validate(psp_timerange), time_clip=True)\nswe_vars = pyspedas.ace.swe(trange=validate(timerange_earth), datatype = 'h0')\n\n29-Jan-24 14:35:31: Downloading remote index: https://spdf.gsfc.nasa.gov/pub/data/psp/sweap/spi/l3/spi_sf00_l3_mom/2019/\n\n\nUsing LEVEL=L3\n\n\n29-Jan-24 14:35:31: File is current: /Users/zijin/data/psp/sweap/spi/l3/spi_sf00_l3_mom/2019/psp_swp_spi_sf00_l3_mom_20190406_v04.cdf\n29-Jan-24 14:35:31: File is current: /Users/zijin/data/psp/sweap/spi/l3/spi_sf00_l3_mom/2019/psp_swp_spi_sf00_l3_mom_20190407_v04.cdf\n29-Jan-24 14:35:32: Downloading remote index: https://spdf.gsfc.nasa.gov/pub/data/ace/swepam/level_2_cdaweb/swe_h0/2019/\n29-Jan-24 14:35:32: File is current: /Users/zijin/data/ace/swepam/level_2_cdaweb/swe_h0/2019/ac_h0_swe_20190409_v11.cdf\n29-Jan-24 14:35:33: File is current: /Users/zijin/data/ace/swepam/level_2_cdaweb/swe_h0/2019/ac_h0_swe_20190410_v11.cdf\n29-Jan-24 14:35:33: File is current: /Users/zijin/data/ace/swepam/level_2_cdaweb/swe_h0/2019/ac_h0_swe_20190411_v11.cdf\n29-Jan-24 14:35:33: File is current: /Users/zijin/data/ace/swepam/level_2_cdaweb/swe_h0/2019/ac_h0_swe_20190412_v11.cdf\n29-Jan-24 14:35:33: File is current: /Users/zijin/data/ace/swepam/level_2_cdaweb/swe_h0/2019/ac_h0_swe_20190413_v11.cdf\n\n\n\ntvar = tvectot(\"psp_spi_VEL_RTN_SUN\")\npsp_ion_speed: xr.DataArray = get_data(tvar, xarray=True)\n\nace_ion_speed: xr.DataArray = get_data(\"Vp\", xarray=True)\n\n\ndef calc_correlation(\n    v1: xr.DataArray,\n    v2: xr.DataArray,\n    v1_timerange: TimeRange,\n    v2_timerange: TimeRange,\n    cadence: timedelta = timedelta(minutes=10),\n    window: timedelta = timedelta(hours=1),\n):\n    v1 = v1.dropna(\"time\").sel(time=slice(v1_timerange.start.to_datetime(), v1_timerange.end.to_datetime()))\n    v2 = v2.dropna(\"time\").sel(time=slice(v2_timerange.start.to_datetime(), v2_timerange.end.to_datetime()))\n    v1_start = v1_timerange.start.to_datetime()\n    v1_end = v1_timerange.end.to_datetime()\n    \n    results = []\n    for temp_tr in v2_timerange.window(cadence=cadence, window=window):\n        v2_temp_start = temp_tr.start.to_datetime()\n        v2_temp_end = temp_tr.end.to_datetime()\n        \n        v2_temp = v2.sel(time = slice(v2_temp_start, v2_temp_end))\n        v2_temp[\"time\"] = v2_temp[\"time\"] - timedelta64(v2_temp_start - v1_start)\n        v1_temp = v1.interp_like(v2_temp)\n\n        pearsonr = scipy.stats.pearsonr(v1_temp, v2_temp).statistic\n        distance_correlation = dcor.distance_correlation(v1_temp, v2_temp)\n        results.append([v1_start, v1_end, v2_temp_start, v2_temp_end, pearsonr, distance_correlation])\n\n    return pl.DataFrame(results, schema=[\"v1_start\", \"v1_end\", \"v2_start\", \"v2_end\", \"Pearson correlation\", \"Distance correlation\"])\n\n29-Jan-24 14:35:35: /Users/zijin/micromamba/envs/psp_conjunction/lib/python3.11/site-packages/dcor/_fast_dcov_avl.py:554: UserWarning: Falling back to uncompiled AVL fast distance covariance terms because of TypeError exception raised: No matching definition for argument type(s) array(float64, 1d, C), array(float32, 1d, C), bool. Rembember: only floating point values can be used in the compiled implementations.\n  warnings.warn(\n\n\n\n\n\nwindow = (psp_timerange.end - psp_timerange.start)\ncadence = timedelta(minutes=10)\n\ndf = calc_correlation(\n    psp_ion_speed,\n    ace_ion_speed,\n    psp_timerange,\n    timerange_earth,\n    cadence = cadence,\n    window = window,\n)\n\n\ndf\n\n\n\nshape: (578, 6)\n\n\n\nv1_start\nv1_end\nv2_start\nv2_end\nPearson correlation\nDistance correlation\n\n\ndatetime[μs]\ndatetime[μs]\ndatetime[μs]\ndatetime[μs]\nf64\nf64\n\n\n\n\n2019-04-06 12:00:00\n2019-04-07 12:00:00\n2019-04-09 00:00:00\n2019-04-10 00:00:00\n0.129733\n0.295187\n\n\n2019-04-06 12:00:00\n2019-04-07 12:00:00\n2019-04-09 00:10:00\n2019-04-10 00:10:00\n0.115776\n0.290461\n\n\n2019-04-06 12:00:00\n2019-04-07 12:00:00\n2019-04-09 00:20:00\n2019-04-10 00:20:00\n0.125829\n0.295799\n\n\n2019-04-06 12:00:00\n2019-04-07 12:00:00\n2019-04-09 00:30:00\n2019-04-10 00:30:00\n0.134056\n0.299338\n\n\n2019-04-06 12:00:00\n2019-04-07 12:00:00\n2019-04-09 00:40:00\n2019-04-10 00:40:00\n0.141806\n0.309491\n\n\n2019-04-06 12:00:00\n2019-04-07 12:00:00\n2019-04-09 00:50:00\n2019-04-10 00:50:00\n0.137222\n0.310114\n\n\n2019-04-06 12:00:00\n2019-04-07 12:00:00\n2019-04-09 01:00:00\n2019-04-10 01:00:00\n0.130128\n0.307473\n\n\n2019-04-06 12:00:00\n2019-04-07 12:00:00\n2019-04-09 01:10:00\n2019-04-10 01:10:00\n0.132468\n0.314047\n\n\n2019-04-06 12:00:00\n2019-04-07 12:00:00\n2019-04-09 01:20:00\n2019-04-10 01:20:00\n0.137969\n0.310688\n\n\n2019-04-06 12:00:00\n2019-04-07 12:00:00\n2019-04-09 01:30:00\n2019-04-10 01:30:00\n0.153246\n0.316048\n\n\n2019-04-06 12:00:00\n2019-04-07 12:00:00\n2019-04-09 01:40:00\n2019-04-10 01:40:00\n0.169566\n0.320866\n\n\n2019-04-06 12:00:00\n2019-04-07 12:00:00\n2019-04-09 01:50:00\n2019-04-10 01:50:00\n0.167484\n0.325138\n\n\n…\n…\n…\n…\n…\n…\n\n\n2019-04-06 12:00:00\n2019-04-07 12:00:00\n2019-04-12 22:20:00\n2019-04-13 22:20:00\n-0.75871\n0.797919\n\n\n2019-04-06 12:00:00\n2019-04-07 12:00:00\n2019-04-12 22:30:00\n2019-04-13 22:30:00\n-0.769157\n0.807681\n\n\n2019-04-06 12:00:00\n2019-04-07 12:00:00\n2019-04-12 22:40:00\n2019-04-13 22:40:00\n-0.772618\n0.81499\n\n\n2019-04-06 12:00:00\n2019-04-07 12:00:00\n2019-04-12 22:50:00\n2019-04-13 22:50:00\n-0.78226\n0.825125\n\n\n2019-04-06 12:00:00\n2019-04-07 12:00:00\n2019-04-12 23:00:00\n2019-04-13 23:00:00\n-0.788294\n0.830554\n\n\n2019-04-06 12:00:00\n2019-04-07 12:00:00\n2019-04-12 23:10:00\n2019-04-13 23:10:00\n-0.783344\n0.829585\n\n\n2019-04-06 12:00:00\n2019-04-07 12:00:00\n2019-04-12 23:20:00\n2019-04-13 23:20:00\n-0.788571\n0.834751\n\n\n2019-04-06 12:00:00\n2019-04-07 12:00:00\n2019-04-12 23:30:00\n2019-04-13 23:30:00\n-0.787044\n0.837541\n\n\n2019-04-06 12:00:00\n2019-04-07 12:00:00\n2019-04-12 23:40:00\n2019-04-13 23:40:00\n-0.788278\n0.841798\n\n\n2019-04-06 12:00:00\n2019-04-07 12:00:00\n2019-04-12 23:50:00\n2019-04-13 23:50:00\n-0.785141\n0.839557\n\n\n2019-04-06 12:00:00\n2019-04-07 12:00:00\n2019-04-13 00:00:00\n2019-04-14 00:00:00\n-0.777335\n0.835922\n\n\n2019-04-06 12:00:00\n2019-04-07 12:00:00\n2019-04-13 00:10:00\n2019-04-14 00:10:00\n-0.779654\n0.840022\n\n\n\n\n\n\n\n\ndf.hvplot('v2_start', ['Pearson correlation', 'Distance correlation'])",
    "crumbs": [
      "Home",
      "Notebooks",
      "Time series correlation"
    ]
  },
  {
    "objectID": "article.html",
    "href": "article.html",
    "title": "Evolution of solar wind discontinuities in the inner heliosphere",
    "section": "",
    "text": "![](figures/density_distribution.png\n\n\n\n\n\n\n\n\n\nFigure 1\n\n\n\n\n\n\n\nSolar wind discontinuities examples observed by PSP and ARTEMIS fitted by a logistic function in LMN coordinates.\n\n\nFigure 2: In general discontinuities observed by PSP is much shorter (1~5 secs) with larger current density.\n\n\n\n\n\n\n\n\n\nFigure 3: Comparision map of (normalized) thickness and (normalized) current density\n\n\n\nSolar wind properties\nL: j: \\(\\Delta v_l\\)",
    "crumbs": [
      "Home",
      "Evolution of solar wind discontinuities in the inner heliosphere"
    ]
  },
  {
    "objectID": "notebooks/00_notes.html",
    "href": "notebooks/00_notes.html",
    "title": "Notes",
    "section": "",
    "text": "import polars as pl\n\n\ndf = pl.read_csv('../data/psp_events.csv', try_parse_dates=True)\ndf.to_pandas()\n\n\n\nTable 1: PSP events\n\n\n\n\n\n\n\n\n\n\n\nEvent\nDistance (R_sun)\nTime\nNotes\n\n\n\n\n0\nE1\n35.6\n2018-11-06 03:27:00\nPerihelion\n\n\n1\nE2\n35.6\n2019-04-04 22:39:00\nPerihelion\n\n\n2\nE3\n35.6\n2019-09-01 17:50:00\nPerihelion\n\n\n3\nE4\n27.8\n2020-01-29 09:37:00\nPerihelion\n\n\n4\nE5\n27.8\n2020-06-07 08:23:00\nPerihelion\n\n\n5\nE6\n20.3\n2020-09-27 09:16:00\nPerihelion\n\n\n6\nE7\n20.3\n2021-01-17 17:40:00\nPerihelion\n\n\n7\nE8\n15.9\n2021-04-29 08:48:00\nPerihelion\n\n\n8\nE9\n15.9\n2021-08-09 19:11:00\nPerihelion\n\n\n9\nE10\n13.3\n2021-11-21 08:23:00\nPerihelion\n\n\n10\nE11\n13.3\n2022-02-25 15:38:00\nPerihelion\n\n\n11\nE12\n13.3\n2022-06-01 22:51:00\nPerihelion\n\n\n12\nE13\n13.3\n2022-09-06 06:04:00\nPerihelion\n\n\n13\nE14\n13.3\n2022-12-11 13:16:00\nPerihelion\n\n\n14\nE15\n13.3\n2023-03-17 20:30:00\nPerihelion\n\n\n15\nE16\n13.3\n2023-06-22 03:46:00\nPerihelion\n\n\n16\nE17\n11.4\n2023-09-27 23:28:00\nPerihelion\n\n\n17\nE18\n11.4\n2023-12-29 00:54:00\nPerihelion\n\n\n18\nE19\n11.4\n2024-03-30 02:20:00\nPerihelion\n\n\n19\nE20\n11.4\n2024-06-30 03:46:00\nPerihelion\n\n\n20\nE21\n11.4\n2024-09-30 05:13:00\nPerihelion\n\n\n21\nE22\n9.9\n2024-12-24 11:41:00\nPerihelion\n\n\n22\nE23\n9.9\n2025-03-22 22:25:00\nPerihelion\n\n\n23\nE24\n9.9\n2025-06-19 09:09:00\nPerihelion\n\n\n\n\n\n\n\n\n\n\n\n\nAnisotropy\n\nPSP_SWP_SPI_SF00_L3_MOM\n\nNotes: Partial moments of the Proton distribution function in the SPAN-Ion instrument, PSP spacecraft, and RTN coordinate systems. User should be aware that the full ion distribution is typically NOT in the FOV of the instrument.\nT_TENSOR Partial Moment Temperature Tensor in instrument frame\n\nWI_H0_SWE\n\nTe_anisotropy Temperature anisotropy = Te_para / Te_perp\n\nWI_PLSP_3DP\n\nMOM.P.MAGT3 —&gt; [P.SYMM_MAGT3] Proton temperature tensor… rotated into a field-aligned coordinate basis and then taking the diagonal elements only\n\nWI_ELM2_3DP : Wind 3dp, PESA Low (~24 sec resolution) energy spectra with ion moments\n\nMAGT3 —&gt; [MAGT3] electron temperature tensor… rotated into a field-aligned coordinate basis and then taking the diagonal elements only\n\nTHB_L2_ESA\n\nthb_peeb_magt3Q —–Electron Temperature, Field Aligned (Tprp1FA, Tprp2FA, TparFA)\nthb_peef_magt3Q —–Electron Temperature, Field Aligned (Tprp1FA, Tprp2FA, TparFA)\nthb_peif_magt3Q —–Temperature, Field Aligned (TprpFA1, TprpFA2, TparFA)\n\nTHB_L2_MOM\n\nthb_peem_ptens_magQ —–Electron Pressure Tensor, Field Aligned\nthb_peem_t3_magQ —–Electron Temperature, Field Aligned (TprpFA1, TprpFA2, TparFA)\nthb_peim_ptens_magQ —–Ion Pressure Tensor, Field Aligned\nthb_peim_t3_magQ —–Ion Temperature, Field Aligned (TprpFA1, TprpFA2, TparFA)",
    "crumbs": [
      "Home",
      "Notebooks",
      "Notes"
    ]
  },
  {
    "objectID": "notebooks/05_psp_data.html",
    "href": "notebooks/05_psp_data.html",
    "title": "Parker Solar Probe data",
    "section": "",
    "text": "The parameters are:\n\n‘psp_fld_l2_mag_RTN_4_Sa_per_Cyc’ (B in RTN, 0.25s resolution)\n‘psp_swp_spi_sf00_L3_DENS’ (Ion density, regular resolution)\n‘psp_swp_spi_af00_L3_DENS’ (Ion density, burst resolution)\n‘psp_swp_spi_sf00_L3_VEL_RTN_SUN’ (velocity in RTN in Sun’s frame, regular resolution)\n‘psp_swp_spi_af00_L3_VEL_RTN_SUN’ (velocity in RTN in Sun’s frame, burst resolution)\n‘psp_swp_spi_sf00_L3_VEL_RTN’ (velocity in RTN in spacecraft frame, regular resolution, you need this to calculate current sheet thickness)\n‘psp_swp_spi_af00_L3_VEL_RTN’ (velocity in RTN in spacecraft frame, burst resolution, you need this to calculate current sheet thickness)\n‘Tp_spani_b’ (Ion parallel and perpendicular ion temperature, regular resolution. Blue (first element in array): parallel, Red: perp)\n‘Tp_spanib_b’ (Ion parallel and perpendicular ion temperature, burst resolution. Blue (first element in array): parallel, Red: perp)\n\n\nfrom pytplot import tplot_restore, tplot_names, tplot, get_data\nfrom discontinuitypy import IDsDataset\nfrom space_analysis.ds.meta import Meta, PlasmaMeta, TempMeta\nimport polars as pl\nimport numpy as np\nfrom utils.temp import calc_pressure_anisotropy\n\n\nenc = 7\ntau = 16\nname = 'psp'\nfile_name = f\"../data/psp_e{enc:02}.tplot\"\n\n\ntplot_restore(file_name)\ntnames = tplot_names()\n\n0 : psp_fld_l2_mag_RTN_4_Sa_per_Cyc\n1 : psp_swp_spi_sf00_L3_DENS\n2 : psp_swp_spi_sf00_L3_VEL_RTN_SUN\n3 : psp_swp_spi_sf00_L3_VEL_RTN\n4 : psp_swp_spi_af00_L3_DENS\n5 : psp_swp_spi_af00_L3_VEL_RTN_SUN\n6 : psp_swp_spi_af00_L3_VEL_RTN\n7 : Tp_spani_b\n8 : Tp_spanib_b\n\n\n\ndef get_data_lf(name):\n    da = get_data(name, xarray=True)\n    df = da.to_pandas().reset_index()\n    return pl.LazyFrame(df).with_columns(\n        pl.col(\"time\").dt.cast_time_unit('us'),\n    )\n\ndensity_col = 'plasma_density'\nvelocity_cols = ['v_R', 'v_T', 'v_N']\n\nmag_data = get_data_lf('psp_fld_l2_mag_RTN_4_Sa_per_Cyc')\ndensity_data = get_data_lf('psp_swp_spi_sf00_L3_DENS').rename({'0': density_col})\nvelocity_data = get_data_lf('psp_swp_spi_sf00_L3_VEL_RTN').rename({'0': 'v_R', '1': 'v_T', '2': 'v_N'}) # velocity in RTN in spacecraft frame, regular resolution, you need this to calculate current sheet thickness\nion_temp_data = get_data_lf('Tp_spani_b').rename({'0': 'ion_temp_para', '1': 'ion_temp_perp'})\n# ion_temp_burst_data = get_data_lf('Tp_spanib_b').rename({'0': 'ion_temp_para_burst', '1': 'ion_temp_perp_burst'})\n\nplasma_data = density_data.join(velocity_data, on='time')\n\nplasma_meta = PlasmaMeta(\n    density_col=density_col,\n    velocity_cols=velocity_cols,\n)\n\n11-May-24 12:44:01: DeprecationWarning: np.find_common_type is deprecated.  Please use `np.result_type` or `np.promote_types`.\nSee https://numpy.org/devdocs/release/1.25.0-notes.html and the docs for more information.  (Deprecated NumPy 1.25)\n\n11-May-24 12:44:01: DeprecationWarning: np.find_common_type is deprecated.  Please use `np.result_type` or `np.promote_types`.\nSee https://numpy.org/devdocs/release/1.25.0-notes.html and the docs for more information.  (Deprecated NumPy 1.25)\n\n11-May-24 12:44:01: DeprecationWarning: np.find_common_type is deprecated.  Please use `np.result_type` or `np.promote_types`.\nSee https://numpy.org/devdocs/release/1.25.0-notes.html and the docs for more information.  (Deprecated NumPy 1.25)\n\n11-May-24 12:44:01: DeprecationWarning: np.find_common_type is deprecated.  Please use `np.result_type` or `np.promote_types`.\nSee https://numpy.org/devdocs/release/1.25.0-notes.html and the docs for more information.  (Deprecated NumPy 1.25)\n\n\n\n\ntime = mag_data.collect().get_column(\"time\").to_numpy()\nts = np.median(np.diff(time)).item()\n\n\nids_dataset = IDsDataset(\n    name=name,\n    mag_data=mag_data,\n    tau=tau,\n    ts=ts,\n    ion_temp_data = ion_temp_data,\n    plasma_data=plasma_data,\n    plasma_meta=plasma_meta\n    \n)\nids_dataset.find_events().update_events()\n\nids_dataset.events = ids_dataset.events.pipe(calc_pressure_anisotropy)\n\n11-May-24 12:44:05: UserWarning: Ray execution environment not yet initialized. Initializing...\nTo remove this warning, run the following python code before doing dataframe operations:\n\n    import ray\n    ray.init()\n\n\n11-May-24 12:44:05: ResourceWarning: unclosed file &lt;_io.TextIOWrapper name='/tmp/ray/session_2024-05-11_12-44-05_931351_17046/logs/gcs_server.out' mode='a' encoding='utf-8'&gt;\n\n11-May-24 12:44:05: ResourceWarning: unclosed file &lt;_io.TextIOWrapper name='/tmp/ray/session_2024-05-11_12-44-05_931351_17046/logs/gcs_server.err' mode='a' encoding='utf-8'&gt;\n\n11-May-24 12:44:06: ResourceWarning: unclosed file &lt;_io.TextIOWrapper name='/tmp/ray/session_2024-05-11_12-44-05_931351_17046/logs/monitor.out' mode='a' encoding='utf-8'&gt;\n\n11-May-24 12:44:06: ResourceWarning: unclosed file &lt;_io.TextIOWrapper name='/tmp/ray/session_2024-05-11_12-44-05_931351_17046/logs/monitor.err' mode='a' encoding='utf-8'&gt;\n\n11-May-24 12:44:07: ResourceWarning: unclosed file &lt;_io.TextIOWrapper name='/tmp/ray/session_2024-05-11_12-44-05_931351_17046/logs/dashboard.err' mode='a' encoding='utf-8'&gt;\n\n11-May-24 12:44:07: ResourceWarning: unclosed file &lt;_io.TextIOWrapper name='/tmp/ray/session_2024-05-11_12-44-05_931351_17046/logs/raylet.out' mode='a' encoding='utf-8'&gt;\n\n11-May-24 12:44:07: ResourceWarning: unclosed file &lt;_io.TextIOWrapper name='/tmp/ray/session_2024-05-11_12-44-05_931351_17046/logs/raylet.err' mode='a' encoding='utf-8'&gt;\n\n11-May-24 12:44:07: ResourceWarning: unclosed file &lt;_io.TextIOWrapper name='/tmp/ray/session_2024-05-11_12-44-05_931351_17046/logs/log_monitor.err' mode='a' encoding='utf-8'&gt;\n\n2024-05-11 12:44:07,946 INFO worker.py:1724 -- Started a local Ray instance.\n11-May-24 12:44:09: UserWarning: Distributing &lt;class 'pandas.core.frame.DataFrame'&gt; object. This may take some time.\n\n\n\n\n\n\n\n\n\n(_deploy_ray_func pid=17131) 11-May-24 12:44:15: RuntimeWarning: overflow encountered in exp\n(_deploy_ray_func pid=17131) \n11-May-24 12:44:16: PendingDeprecationWarning: The `dims` argument has been renamed to `dim`, and will be removed in the future. This renaming is taking place throughout xarray over the next few releases.\n\n11-May-24 12:44:16: PendingDeprecationWarning: The `dims` argument has been renamed to `dim`, and will be removed in the future. This renaming is taking place throughout xarray over the next few releases.\n\n11-May-24 12:44:16: PendingDeprecationWarning: The `dims` argument has been renamed to `dim`, and will be removed in the future. This renaming is taking place throughout xarray over the next few releases.\n\n11-May-24 12:44:16: PendingDeprecationWarning: The `dims` argument has been renamed to `dim`, and will be removed in the future. This renaming is taking place throughout xarray over the next few releases.\n\n11-May-24 12:44:16: PendingDeprecationWarning: The `dims` argument has been renamed to `dim`, and will be removed in the future. This renaming is taking place throughout xarray over the next few releases.\n\n2024-05-11 12:44:16.441 | INFO     | discontinuitypy.datasets:update_events_with_temp_data:173 - Electron temperature data is not available.\n2024-05-11 12:44:16.442 | INFO     | utils.temp:calc_pressure_anisotropy:40 - Electron temperature columns not found\n\n\n\npath = f\"../data/enc{enc}/events.PSP.arrow\"\nids_dataset.export(path)\n\n\ntplot(tnames)\n\n\n\n\n\n\n\n\nids_dataset",
    "crumbs": [
      "Home",
      "Notebooks",
      "Parker Solar Probe data"
    ]
  },
  {
    "objectID": "notebooks/06_psp_examples.html",
    "href": "notebooks/06_psp_examples.html",
    "title": "Parker Solar Probe Examples",
    "section": "",
    "text": "from utils.io import load_psp_data, time_stamp\nfrom pytplot import tplot, tlimit, timebar\nimport pytplot\nfrom utils.config import PSPConfig\n\n11-May-24 14:41:22: Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError(\"HTTPConnectionPool(host='sciqlop.lpp.polytechnique.fr', port=80): Read timed out. (read timeout=1)\")': /cache/get_inventory?provider=ssc\n11-May-24 14:41:25: Retrying (Retry(total=3, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError(\"HTTPConnectionPool(host='sciqlop.lpp.polytechnique.fr', port=80): Read timed out. (read timeout=1)\")': /cache/get_inventory?provider=ssc\n11-May-24 14:41:30: Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError(\"HTTPConnectionPool(host='sciqlop.lpp.polytechnique.fr', port=80): Read timed out. (read timeout=1)\")': /cache/get_inventory?provider=ssc\n11-May-24 14:41:39: Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError(\"HTTPConnectionPool(host='sciqlop.lpp.polytechnique.fr', port=80): Read timed out. (read timeout=1)\")': /cache/get_inventory?provider=ssc\n\n\n\nn = 10\n\n\ntnames = load_psp_data()\n\n0 : psp_fld_l2_mag_RTN_4_Sa_per_Cyc\n1 : psp_swp_spi_sf00_L3_DENS\n2 : psp_swp_spi_sf00_L3_VEL_RTN_SUN\n3 : psp_swp_spi_sf00_L3_VEL_RTN\n4 : psp_swp_spi_af00_L3_DENS\n5 : psp_swp_spi_af00_L3_VEL_RTN_SUN\n6 : psp_swp_spi_af00_L3_VEL_RTN\n7 : Tp_spani_b\n8 : Tp_spanib_b\n\n\n\nimport polars as pl\n  \ndef find_events(df: pl.DataFrame):\n    return df.with_columns(\n        Λ_t = 1 - (pl.col(\"v.ion.change.l\") / pl.col(\"v.Alfven.change.l\")) ** 2\n    ).with_columns(\n        rate =  (pl.col(\"Λ_ion\") / pl.col(\"Λ_t\") - 1).abs()\n    ).sort(\"rate\")\n    \np_conf = PSPConfig(enc=7).load()\nevents = find_events(p_conf.events).head(n=n)\n\n\ndef plot_event(event, tnames2plot, td_stop_c = \"t.d_end\", add_timebars = True):\n    tstart = time_stamp(event[\"tstart\"])\n    tstop = time_stamp(event[\"tstop\"])\n    td_start = event[\"t.d_start\"]\n    td_stop = event[td_stop_c]\n    \n    tlimit([tstart,tstop])\n\n    if add_timebars:\n        timebar(time_stamp(td_start))\n        timebar(time_stamp(td_stop))\n\n    return tplot(tnames2plot, return_plot_objects=True)\n\n\nfrom discontinuitypy.utils.plot import plot_candidate\nfrom pytplot import get_data\n\ndef plot_candidate_tplot(event, name= 'psp_fld_l2_mag_RTN_4_Sa_per_Cyc'):\n    da = get_data(name, xarray=True)\n    return plot_candidate(event, da)\n\n\ntnames2plot = [\n    'psp_fld_l2_mag_RTN_4_Sa_per_Cyc',\n    'psp_swp_spi_sf00_L3_DENS',\n    'psp_swp_spi_sf00_L3_VEL_RTN_SUN',\n    'Tp_spani_b'\n]\n\n\nfrom great_tables import GT\n\nGT(events.select(\"tstart\", \"tstop\", \"Λ_t\", \"Λ_ion\")).fmt_datetime(\n    columns=[\"tstart\", \"tstop\"]\n).fmt_number(columns=[\"Λ_t\", \"Λ_ion\"], decimals=2)\n\n\n\n\n\n\n\n\ntstart\ntstop\nΛ_t\nΛ_ion\n\n\n\n\n2021-01-17 13:22:56\n2021-01-17 13:23:12\n0.90\n0.74\n\n\n2021-01-17 14:00:40\n2021-01-17 14:00:56\n0.46\n0.57\n\n\n2021-01-17 14:04:08\n2021-01-17 14:04:24\n1.00\n0.73\n\n\n2021-01-17 14:02:48\n2021-01-17 14:03:04\n0.70\n0.92\n\n\n2021-01-17 13:54:16\n2021-01-17 13:54:32\n0.79\n0.51\n\n\n2021-01-17 13:29:28\n2021-01-17 13:29:44\n0.96\n0.52\n\n\n2021-01-18 19:17:44\n2021-01-18 19:18:00\n0.34\n0.18\n\n\n2021-01-18 19:19:44\n2021-01-18 19:20:00\n0.36\n0.18\n\n\n2021-01-18 17:00:16\n2021-01-18 17:00:32\n0.47\n0.24\n\n\n2021-01-17 14:07:04\n2021-01-17 14:07:20\n0.96\n0.48\n\n\n\n\n\n\n        \n\n\n\npytplot.tplot_options('ysize', 10)\n\ntitle = \"Ion anisotropy: {:.2f} Theory anisotropy: {:.2f}\"\n\nfor event in events.rows(named=True):\n    fig, axs = plot_event(event, tnames2plot)\n    axs[0].set_title(title.format(event[\"Λ_ion\"], event[\"Λ_t\"]))\n    plot_candidate_tplot(event)",
    "crumbs": [
      "Home",
      "Notebooks",
      "Parker Solar Probe Examples"
    ]
  },
  {
    "objectID": "notebooks/events/index.html",
    "href": "notebooks/events/index.html",
    "title": "Events",
    "section": "",
    "text": "Starting point for the PSP encounter analysis.\nPSP Science Planning\nOrbit Plotter - PSP Science Gateway",
    "crumbs": [
      "Home",
      "Notebooks",
      "Events"
    ]
  },
  {
    "objectID": "notebooks/events/index.html#psp-earth",
    "href": "notebooks/events/index.html#psp-earth",
    "title": "Events",
    "section": "2018-10-24 PSP Earth",
    "text": "2018-10-24 PSP Earth\nfile:/Users/zijin/projects/psp_conjunction/files/psp_v.vap?timerange=2018-10-23+through+2018-10-25\nPSP plasma data is very sparse (6 data point/day)",
    "crumbs": [
      "Home",
      "Notebooks",
      "Events"
    ]
  },
  {
    "objectID": "notebooks/events/index.html#trange-encounter-8",
    "href": "notebooks/events/index.html#trange-encounter-8",
    "title": "Events",
    "section": "Trange: Encounter 8",
    "text": "Trange: Encounter 8\n\nWHPI - Campaign: PSP 15th Perhihelion\n\n2021-05-09\n\n\nvap+cdaweb:ds=PSP_SWP_SPC_L3I&filter=psp&id=vp_moment_RTN[:,0];vp_moment_RTN[:,1];vp_moment_RTN[:,2]&timerange=2021-05-07+through+2021-05-08\n|rebundle(vp_moment_R,vp_moment_T,vp_moment_N)|magnitude()\n|rebundle(psp_fld_l2_mag_RTN_1min__0,psp_fld_l2_mag_RTN_1min__0,psp_fld_l2_mag_RTN_1min__0)|magnitude()\n\nops: “|rebundle(vp_moment_R,vp_moment_T,vp_moment_N)|magnitude()” title: “PSP/SWP_SPC Proton bulk velocity from the 1st moment of the reduced distribution function in [inertial] RTN coordinate system (All Qualities)” y: label: V (km/s)\nops: “|rebundle(B_R,B_T,B_N)|magnitude()” y: label: B (nT) title: PSP_FLD/MAG_RTN_1min Magnetic field in RTN coordinates (1 minute cadence)\n\nPSP/PSP/SWEAP/SPAN Partial Moment Velocity in RTN Coordinates and Sun reference frame |rebundle(Vx RTN,Vy RTN,Vz RTN)|magnitude()\nWind or ACE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntr = ‘2021-05-06 22:46 to 2021-05-15 22:46’ vp = getDataSet( ‘vap+cdaweb:ds=PSP_SWP_SPC_L3I&filter=psp_SW&id=vp_moment_RTN’, tr ) plot( 0, vp )\ndensity5min= getDataSet( ‘http://cdaweb.gsfc.nasa.gov/pub/data/ace/mag/level_2_cdaweb/mfi_k0/2017/ac_k0_mfi_20170117_v01.cdf?Magnitude’) dst60min= getDataSet( ‘http://cdaweb.gsfc.nasa.gov/pub/data/omni/omni_cdaweb/hourly/2017/omni2_h0_mrg1hr_20170101_v01.cdf?DST’)\nt5min= density5min.property(QDataSet.DEPEND_0)\n( density, flux, dst ) = synchronize( t5min, density5min, flux4min, dst60min, nn=1 ) # experimental function (note there is a built-in function in Autoplot v2017a. plot( 1, flux ) plot( 2, dst )",
    "crumbs": [
      "Home",
      "Notebooks",
      "Events"
    ]
  },
  {
    "objectID": "notebooks/events/index.html#trange",
    "href": "notebooks/events/index.html#trange",
    "title": "Events",
    "section": "Trange",
    "text": "Trange\n\nC4, 18 September, b 2021. This will be an inferior triple SO–PSP–STEREO-A conjunction, with SO inside the orbit of Venus around 0.6 AU, PSP at about 0.7 AU, and STEREO-A at 0.9 AU. This will be an occasion for joint in situ studies of the properties of turbulence and dynamics of a solar wind stream between 0.5 and 1 AU.\n\nhttps://solar-mach.streamlit.app/?embedded=true&date=20210925&time=0000&coord_sys=0&plot_spirals=1&plot_sun_body_line=1&plot_trans=0&plot_markers=Numbers&long_offset=270&bodies=STEREO+A&bodies=Earth&bodies=BepiColombo&bodies=Parker+Solar+Probe&bodies=Solar+Orbiter&speeds=346&speeds=485&speeds=400&speeds=300&speeds=287&",
    "crumbs": [
      "Home",
      "Notebooks",
      "Events"
    ]
  },
  {
    "objectID": "notebooks/events/index.html#trange-encounter-11-2022-02",
    "href": "notebooks/events/index.html#trange-encounter-11-2022-02",
    "title": "Events",
    "section": "Trange: Encounter 11, 2022-02",
    "text": "Trange: Encounter 11, 2022-02\n\nE11, C6, Q8, Q9 23–27 February, 2022. PSP approaches encounter E11 beginning with a trailing quadrature Q8 on 23 February, 2022, appearing on the east limb of the Sun from SO, before rapidly going through conjunction with STEREO-A and then SO and Earth (24 and 25 February, respectively) at perihe- lion with the Earth–Sun–STEREO-A angle ’40◦ and the Earth–",
    "crumbs": [
      "Home",
      "Notebooks",
      "Events"
    ]
  },
  {
    "objectID": "notebooks/events/e2.html",
    "href": "notebooks/events/e2.html",
    "title": "Encounter 2 (2019-04-07)",
    "section": "",
    "text": "ENLIL Solar Wind Prediction - Parker Solar Probe - Perihelion 02\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPSP Observation Overvall\n\n\n\n\n\n\n\n\n\n\n\nPSP observation\n\n\n\n\n\n\n\nACE observation\n\n\n\n\n\n\n\nACE observation (continued)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2019-04-05\n\n\n\n\n\n\n\n2019-04-06\n\n\n\n\n\n\n\n2019-04-07\n\n\n\n\n\n\n\n2019-04-08\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfile:///Users/zijin/projects/autoplot/psp_mag_sw.vap?timerange=2019-04-01+through+2019-04-15\nfile:///Users/zijin/projects/autoplot/psp_mag_sw.vap?timerange=2019-04-06+through+2019-04-08\nfile:///Users/zijin/projects/autoplot/ace.vap?timerange=2019-04-08+through+2019-04-10\nfile:///Users/zijin/projects/autoplot/ace.vap?timerange=2019-04-11+through+2019-04-14\nfile:///Users/zijin/projects/autoplot/wind_plasma.vap?timerange=2019-04-08+through+2019-04-10\nfile:///Users/zijin/projects/autoplot/dscovr.vap?timerange=2019-04-08+through+2019-04-10",
    "crumbs": [
      "Home",
      "Notebooks",
      "Events",
      "Encounter 2 (2019-04-07)"
    ]
  },
  {
    "objectID": "notebooks/events/e2.html#observations",
    "href": "notebooks/events/e2.html#observations",
    "title": "Encounter 2 (2019-04-07)",
    "section": "",
    "text": "PSP Observation Overvall\n\n\n\n\n\n\n\n\n\n\n\nPSP observation\n\n\n\n\n\n\n\nACE observation\n\n\n\n\n\n\n\nACE observation (continued)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2019-04-05\n\n\n\n\n\n\n\n2019-04-06\n\n\n\n\n\n\n\n2019-04-07\n\n\n\n\n\n\n\n2019-04-08",
    "crumbs": [
      "Home",
      "Notebooks",
      "Events",
      "Encounter 2 (2019-04-07)"
    ]
  },
  {
    "objectID": "notebooks/events/e2.html#scripts",
    "href": "notebooks/events/e2.html#scripts",
    "title": "Encounter 2 (2019-04-07)",
    "section": "",
    "text": "file:///Users/zijin/projects/autoplot/psp_mag_sw.vap?timerange=2019-04-01+through+2019-04-15\nfile:///Users/zijin/projects/autoplot/psp_mag_sw.vap?timerange=2019-04-06+through+2019-04-08\nfile:///Users/zijin/projects/autoplot/ace.vap?timerange=2019-04-08+through+2019-04-10\nfile:///Users/zijin/projects/autoplot/ace.vap?timerange=2019-04-11+through+2019-04-14\nfile:///Users/zijin/projects/autoplot/wind_plasma.vap?timerange=2019-04-08+through+2019-04-10\nfile:///Users/zijin/projects/autoplot/dscovr.vap?timerange=2019-04-08+through+2019-04-10",
    "crumbs": [
      "Home",
      "Notebooks",
      "Events",
      "Encounter 2 (2019-04-07)"
    ]
  },
  {
    "objectID": "notebooks/events/e4.html",
    "href": "notebooks/events/e4.html",
    "title": "Encounter 4 (2020-01-28)",
    "section": "",
    "text": "WHPI - Campaign: 2226\n\nWHPI - Parker Perihelion 4 Campaign Highlights\n\nENLIL Solar Wind Prediction - Parker Solar Probe - Perihelion 04\n\n\nThe orbit of Parker Solar Probe (Parker) during the 4th encounter with the Sun presented a unique opportunity for a multi-mission and multi-observatory collaboration as the 4th perihelion occurred nearly at the Sun-Earth line. This unprecedented configuration allowed ground-based solar observatories to measure the solar surface that Parker was magnetically connected to while Parker simultaneously measured the near-Sun environment at the closest distance to the Sun recorded to date (27.8 RS). Additionally, near-Earth missions (e.g., ACE, ARTEMIS, and MMS) could then measure this solar wind once it reached 1 au to study the evolution of solar wind structures as they propagate radially outward from the Sun. Probes within the magnetosphere of Earth, and observatories focused on the ionosphere, could then study how these structures affect the near-Earth environment. To take advantage of this great opportunity for large-scale coordinated science, the Parker Project Science team and the Whole Heliosphere and Planetary Interactions (WHPI) group organized a campaign that has brought together observatories and missions from across the world. This page is meant to contain information and links relevant to the Parker Solar Probe Encounter 4 campaign. For more information, please contact Robert C. Allen (Robert.Allen@jhuapl.edu), the Parker Project Science team coordinator for this effort.\n\nConjunction with In Situ Observations\n\nIn addition to magnetic footpoint mapping for solar observers, ballistic mappings were performed to estimate when solar wind observed at Parker may reach 1 au at either STEREO-A or near-Earth observers. This shows that the footpoints of STEREO-A and Parker may have been near each other from Jan 26th, 2020 to Jan 28th, 2020 (where the red lines cross the black horizontal line at 0), while the footpoints of Earth and Parker may have been close from Jan 29th, 2020 until Jan 31st, 2020 (where the blue lines cross the zero-line).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStart Date: 20200125\nEnd Date: 20200131\nfile:///Users/zijin/projects/autoplot/psp_mag_sw.vap?timerange=2020-01-20+through+2020-01-31\nfile:///Users/zijin/projects/autoplot/psp_mag_sw.vap?timerange=2020-01-27+through+2020-01-31\nfile:///Users/zijin/projects/autoplot/ace.vap?timerange=2019-04-08+through+2019-04-10\nfile:///Users/zijin/projects/autoplot/ace.vap?timerange=2019-04-11+through+2019-04-14\nfile:///Users/zijin/projects/autoplot/wind_plasma.vap?timerange=2019-04-08+through+2019-04-10\nfile:///Users/zijin/projects/autoplot/dscovr.vap?timerange=2019-04-08+through+2019-04-10",
    "crumbs": [
      "Home",
      "Notebooks",
      "Events",
      "Encounter 4 (2020-01-28)"
    ]
  },
  {
    "objectID": "notebooks/01_swd_examples.html",
    "href": "notebooks/01_swd_examples.html",
    "title": "Examples",
    "section": "",
    "text": "::: {#cell-2 .cell 0=‘h’ 1=‘i’ 2=‘d’ 3=‘e’}\n:::\nfrom discontinuitypy.core.pipeline import ids_finder\nfrom discontinuitypy.datasets import IDsDataset\nfrom discontinuitypy.utils.basic import resample\nimport polars as pl\nfrom beforerr.polars import pl_norm\n\nfrom sunpy.time import TimeRange\nfrom datetime import timedelta\nfrom space_analysis.utils.speasy import Variables\nstart = '2019-04-06T12:00'\nstart = '2019-04-07T01:00'\nend = '2019-04-07T12:00'\n\nearth_start = '2019-04-09'\nearth_end = '2019-04-14'\n\n# tau = timedelta(seconds=60)\ntau = timedelta(seconds=10)\nts = timedelta(seconds=1/264)\npsp_timerange = TimeRange(start, end)\ntimerange_earth = TimeRange(earth_start, earth_end)\ndef validate(timerange):\n    if isinstance(timerange, TimeRange):\n        return [timerange.start.to_string(), timerange.end.to_string()]\npsp_mag_data = Variables(\n    dataset=\"PSP_FLD_L2_MAG_RTN\",\n    parameters=[\"psp_fld_l2_mag_RTN\"],\n    timerange=validate(psp_timerange),\n)\npsp_ids_dataset = IDsDataset(\n    mag_data=psp_mag_data.to_polars(),\n    tau=tau,\n    ts=ts,\n)\npsp_ids_dataset.find_events()\npsp_ids_dataset.export(\"../data/psp_ids_dataset.parquet\")",
    "crumbs": [
      "Home",
      "Notebooks",
      "Examples"
    ]
  },
  {
    "objectID": "notebooks/01_swd_examples.html#examples-of-discontinuities-observed-by-psp",
    "href": "notebooks/01_swd_examples.html#examples-of-discontinuities-observed-by-psp",
    "title": "Examples",
    "section": "Examples of discontinuities observed by PSP",
    "text": "Examples of discontinuities observed by PSP\nouts = psp_ids_dataset.plot_candidates(plot_fit_data=True)",
    "crumbs": [
      "Home",
      "Notebooks",
      "Examples"
    ]
  },
  {
    "objectID": "notebooks/01_swd_examples.html#resampled-dataset",
    "href": "notebooks/01_swd_examples.html#resampled-dataset",
    "title": "Examples",
    "section": "Resampled dataset",
    "text": "Resampled dataset\nBy visually inspecting data, the most strong discontinuities kind of have time duration about 1-3 seconds. So it is reasonable to downsample the data to a lower frequency so that\n\nthe detection method is more robust, excluding very high frequency wave/noise?\nit is better to apply the derivative method to get the properties of the discontinuities.\nMatch Wind time resolution.\n\nOr we could fit the \\(B_l\\) to get the properties of the discontinuities.\n\nevery = timedelta(seconds=1/11)\nts = timedelta(seconds=1/11)\n\ndata_r = resample(psp_mag_data, every)\n\n\ncandidates_r = ids_finder(data_r, tau, ts)\n\n\ndataset = \"PSP_SWP_SPI_SF00_L3_MOM\"\nparameters = [\"DENS\", \"VEL_RTN_SUN\", \"TEMP\", \"SUN_DIST\"]\n\n\npsp_plasma = Variables(\n    dataset=dataset, parameters=parameters, timerange=validate(psp_timerange)\n).get_data()\n\n\nvec_cols = [\"Vx RTN\", \"Vy RTN\", \"Vz RTN\"]\n\npsp_plasma_r = (\n    psp_plasma.to_polars()\n    .pipe(resample, every=tau)\n    .with_columns(plasma_speed=pl_norm(vec_cols))\n    .rename(\n        {\n            \"Density\": \"plasma_density\",\n            \"Temperature\": \"plasma_temperature\",\n        }\n    )\n)\n\n\npsp_ids_dataset = IDsDataset(\n    candidates = candidates_r,\n    data = data_r,\n    plasma_data = psp_plasma_r,\n    vec_cols = vec_cols\n)\n\npsp_ids_dataset.update_candidates_with_plasma_data()\n\n\ndef ids_filter(df: pl.DataFrame):\n    return df.filter(\n        pl.col('index_diff')&gt;1, # interested in strong discontinuities\n        pl.col('fit.stat.rsquared')&gt;0.9, # interested in good fits\n    )\n\nouts = psp_ids_dataset.plot_candidates(add_plasma_params=True, plot_fit_data=True)",
    "crumbs": [
      "Home",
      "Notebooks",
      "Examples"
    ]
  },
  {
    "objectID": "notebooks/00_calc.html",
    "href": "notebooks/00_calc.html",
    "title": "Time of arrival",
    "section": "",
    "text": "from plasmapy.formulary import beta\nimport astropy.units as u\n\n\nc1 = beta(1*u.K, 1*u.cm**-3, 1*u.nT)\nc2 = beta(1*u.eV, 1*u.cm**-3, 1*u.nT)\n\nprint(\"Coeficiente for beta at T=1K, n=1cm^-3, B=1nT: \", c1)\nprint(\"Coeficiente for beta at T=1eV, n=1cm^-3, B=1nT: \", c2)\n\nCoeficiente for beta at T=1K, n=1cm^-3, B=1nT:  3.469949406357831e-05\nCoeficiente for beta at T=1eV, n=1cm^-3, B=1nT:  0.402670907669414\n\n\n\nr = 1 * u.AU\nv_fast = 800*u.km/u.s\nv_slow = 300*u.km/u.s\n\nt_min = r/v_fast\nt_max = r/v_slow\n\n\nprint(f'Fast wind ({v_fast}) to travel 1 AU : {t_min.to(u.day)}')\nprint(f'Slow wind ({v_slow}) to travel 1 AU : {t_max.to(u.day)}')\n\nFast wind (800.0 km / s) to travel 1 AU : 2.1643210460069446 d\nSlow wind (300.0 km / s) to travel 1 AU : 5.771522789351852 d",
    "crumbs": [
      "Home",
      "Notebooks",
      "Time of arrival"
    ]
  }
]