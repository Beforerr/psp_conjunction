Interactively exploring the quantities of solar wind. See [Data](000_data.qmd) for more details about different data products.

## Setup

```{julia}
using Dates
using Speasy
using DrWatson
using PSPAnisotropy
using PSPAnisotropy: Wind, PSP, THEMIS
using Discontinuity
using Discontinuity: compute_params!, filter_low_mva_quality
using Discontinuity: compute_Alfvenicity_params!, Alfven_velocity
using SPEDAS
using DimensionalData
using DataFrames, DataFramesMeta
using SpacePhysicsMakie, GLMakie
using SPEDAS: setmeta, setmeta!
using Beforerr: _theme_legend, easy_save
using PartialFunctions

import PSPAnisotropy.Labels as 𝑳
import PSPAnisotropy.YLabel as 𝒀

𝐧 = :mva
𝒎 = var_mapping(; 𝐧)

using Unitful
Unitful.preferunits(u"nA", u"km")
unitify(u) = (*)$u
unitify(u::String) = (*)$uparse(u)
```

## Event example (simple)

```{julia}
df, configs = workload()
compute_params!(df)
compute_Alfvenicity_params!(df)

psp_df = @rsubset(df, :id == "PSP"; view=true)
psp_config = configs[1]
wind_df = @rsubset(df, :id == "Wind"; view=true)
wind_config = configs[2]
thm_df = @rsubset(df, :id == "THEMIS"; view=true)
thm_config = configs[3]

thm_config["B"] = unitify("nT") ∘ thm_config["B"]
```

```{julia}
using DimensionalData


deunit(x::Quantity, u) = NoUnits(x / u)
deunit(x, u) = x

function add_temp_anisotropy!(df, Tp_para, Tp_perp, Te_para, Te_perp, dt=Minute(1))
    @rtransform! df begin
        :Tp_para = deunit(tselect(Tp_para, :time, dt), u"eV")
        :Tp_perp = deunit(tselect(Tp_perp, :time, dt), u"eV")
        :Te_para = deunit(tselect(Te_para, :time, dt), u"eV")
        :Te_perp = deunit(tselect(Te_perp, :time, dt), u"eV")
    end
end

add_temp_anisotropy!(df, Tp, Te, args...) =
    add_temp_anisotropy!(df, Tp.para, Tp.perp, Te.para, Te.perp, args...)


function compute_PSP_anisotropy_params!(psp_df)
    Tp = PSP.read_proton_temperature(7:8)
    Te = PSP.read_electron_temperature()
    add_temp_anisotropy!(psp_df, Tp, Te)
    compute_anisotropy_params!(psp_df, :ion => (:Tp_para, :Tp_perp), :electron => (:Te_para, :Te_perp))
end

function compute_Wind_anisotropy_params!(df, tmin, tmax)
    Wind_Tp2 = Wind.pTemp_T2(tmin, tmax; add_unit=false)
    Wind_Te2 = Wind.eTemp_T2(tmin, tmax; add_unit=false)
    add_temp_anisotropy!(df, Wind_Tp2, Wind_Te2, Minute(2))
    compute_anisotropy_params!(df, :ion => (:Tp_para, :Tp_perp), :electron => (:Te_para, :Te_perp))
end
```

```{julia}
f = Figure(; size=(1200, 800))
psp_event = filter_low_mva_quality(psp_df)[5, :]
fax, res_psp = plot_candidate(f[1, 1], psp_event, psp_config, Second(10))
@info "v_l_ratio" psp_event.V_l_ratio psp_event.V_l_ratio_max
# res_thm = plot_candidate(f[1, 2], thm_df[10, :], thm_config)
# res_thm = plot_candidate(f[1, 2], thm_df[14, :], thm_config)
# res_thm = plot_candidate(f[1, 2], thm_df[17, :], thm_config)
# res_wind = plot_candidate(f[1, 3], wind_df[1, :], wind_config, Second(10))
f
```

## Overview

<!-- TODO: add Alfvénicity over time -->

```{julia}
using Speasy
using SPEDAS: tnorm_combine, tplot, DataSet
using DimensionalData
using CairoMakie
# using GLMakie
using Statistics
using PartialFunctions
using Unitful
using SPEDAS.SpaceDataModel: set, extend, @set

import AlgebraOfGraphics as AoG

update_theme!(;
    figure_padding=1,
    fonts=(; regular=AoG.firasans("Regular"), bold=AoG.firasans("Medium")),
    Legend=(; framevisible=false, padding=(0, 0, 0, -15)),
    Axis=(; xlabelfont=:bold, ylabelfont=:bold),
)
```

```{julia}
mva_transform((V, B), tmin, tmax; tb_min=tmin, tb_max=tmax) = mva(V(tmin, tmax), B(tb_min, tb_max))
```

```{julia}
tmin_psp = DateTime("2021-01-14")
tmax_psp = DateTime("2021-01-20")
tmin_wind = DateTime("2021-01-15")
tmax_wind = DateTime("2021-01-23")
_tmax_wind = DateTime("2021-01-15T02")

tmin_psp = DateTime("2021-01-16")
tmax_psp = DateTime("2021-01-19")
# tmin_wind = DateTime("2021-01-17")
# tmax_wind = DateTime("2021-01-18")
```

```{julia}
psp_B = set(tnorm_combine ∘ PSP.B_1MIN; ylabel=𝒀.B, labels=𝑳.B_RTN)
psp_V = set(PSP.V; ylabel=𝒀.V, labels=𝑳.V_RTN)
psp_n = PSP.n_spi

wind_B = set(tnorm_combine ∘ Wind.B_GSE_1MIN; ylabel=𝒀.B, labels=𝑳.B_XYZ)
wind_V = replace_outliers! ∘ set(Wind.V_GSE_K0; ylabel=𝒀.V, labels=𝑳.V_XYZ)
wind_n = set(Wind.n_p_K0; ylabel=𝒀.n, yscale=identity)
```

```{julia}
tvars_themis = [
    set(tnorm_combine ∘ THEMIS.B_GSE; ylabel=𝒀.B, labels=𝑳.B_XYZ),
    set(THEMIS.n; ylabel=𝒀.n),
    replace_outliers! ∘ set(THEMIS.V_GSE; ylabel=𝒀.V, labels=𝑳.V_XYZ),
    set(THEMIS.eTemp; ylabel=𝒀.T)
]
```


### Alfvén ratio over time

```{julia}
function modify_faxs_base!(faxs)
    B_ax = faxs.axes[1]
    B_ax.ylabel[] = 𝒀.B
    V_ax = faxs.axes[3]
    V_ax.ylabel[] = 𝒀.V
    n_ax = faxs.axes[2]
    n_ax.yscale[] = identity
    n_ax.ylabel[] = 𝒀.n
end

function modify_faxs_vl!(faxs)
    i = 1
    T_ax = faxs.axes[end-3-i]
    T_ax.ylabel[] = "T (eV)"

    R_ax = faxs.axes[end-2-i]
    ylims!(R_ax, 0.09, 0.85)

    β_ax = faxs.axes[end-i]
    β_ax.yscale[] = log10
    ylims!(β_ax, 8e-2, 4e1)

    A_He_ax = faxs.axes[end]
    A_He_ax.yscale[] = identity
    A_He_ax.ylabel[] = L"A_{\text{He}} (%)"
    ylims!(A_He_ax, 0, 8)
end

f = Figure(; size=(800, 600))
# faxs = plot_PSP(f[1, 1], tmin_psp, tmax_psp, get_vl_ratio_ts(psp_df)...)
modify_faxs_vl!(faxs)
f
```

```{julia}
let tmin = tmin_psp, tmax = tmax_psp
    f = Figure(; size=(800, 600))


    faxs = plot_Wind(f[1, 1], tmin_psp, tmax_psp, get_vl_ratio_ts(wind_df)...)
    f
end
```

```{julia}
using SPEDAS: tvec
using CairoMakie
CairoMakie.activate!()

update_theme!(; Lines=(linewidth=1, alpha=0.9), figure_padding=(1, 1, 1, 15))

# for enc in 7:9
plot_vl_ratio = true

for enc in 7:7
    (tmin_psp, tmax_psp), (tmin_wind, tmax_wind) = get_timerange(enc)

    legend = (; position=Top())
    labels = '1':'9'
    padding = (0, 30, 0, -30)

    f = Figure(; size=(800, 600))

    fname = "overview-$enc"

    if plot_vl_ratio
        fname = "overview-vl-$enc"
        faxs = plot_PSP(f[1, 1], tmin_psp, tmax_psp, get_vl_ratio_ts(psp_df)...; legend)
        modify_faxs_base!(faxs)
        plot_vl_ratio && modify_faxs_vl!(faxs)

        compute_Wind_anisotropy_params!(wind_df, tmin_wind, tmax_wind)
        faxs = plot_Wind(f[1, 2], tmin_wind, tmax_wind, get_vl_ratio_ts(wind_df)...; legend)
        modify_faxs_base!(faxs)
        plot_vl_ratio && modify_faxs_vl!(faxs)
    end

    add_labels!(f[1, 1]; labels, open="(a.", padding)
    add_labels!(f[1, 2]; labels, open="(b.", padding)

    easy_save(fname; formats=(:pdf,))
    display(f)


    # tvars_psp = (psp_B, psp_n, psp_V)
    # tvars_wind = (wind_B, wind_n, wind_V)
    # f = Figure(; size=(1200, 600))
    # plots = tplot(f[1, 1], tvars_psp, tmin_psp, tmax_psp; legend)
    # add_labels!(f[1, 1]; labels, open="(a.")
    # tplot(f[1, 2], tvars_wind, tmin_wind, tmax_wind; legend)
    # add_labels!(f[1, 2]; labels, open="(b.")
    # tplot(f[1, 3], _tmask! .∘ tvars_themis, tmin_wind, tmax_wind; legend)
    # add_labels!(f[1, 3]; labels, open="(c.")
    # easy_save("overview-$enc-all")
end
```

## Event example (with pressure anisotropy)

```{julia}
using Discontinuity: ids_finder
tau = Second(30)
psp_events = ids_finder(PSP.B, tmin_psp, tmax_psp, tau)
wind_events = ids_finder(Wind.B_GSE, tmin_wind, tmax_wind, tau, Wind.V_GSE, Wind.n_p)
thm_events = ids_finder(THEMIS.B_FGL_GSE, tmin_wind, tmax_wind, tau)
```

```{julia}
psp_B_mva = set(mva ∘ PSP.B; name="mva_B", labels=𝑳.B_LMN)
psp_V_mva = Product((PSP.V, PSP.B), mva_transform; ylabel=𝒀.V, labels=𝑳.V_LMN)
psp_eTemp_ani = Product(read_electron_temperature(), tview; labels=["Electron (parallel)", "Electron (perpendicular)"])
psp_pTemp_ani = Product(read_proton_temperature(), tview; labels=["Proton (parallel)", "Proton (perpendicular)"])
psp_Temp_ani = [psp_eTemp_ani, psp_pTemp_ani]
psp_mva_all = [psp_B_mva, psp_V_mva, psp_Temp_ani]

thm_B_mva = set(mva ∘ THEMIS.B_FGL_GSE; name="mva_B", labels=𝑳.B_LMN)
thm_V_mva = Product((THEMIS.V_GSE, THEMIS.B_FGL_GSE), mva_transform; ylabel=𝒀.V, labels=𝑳.V_LMN)
thm_mva_all = [thm_B_mva, thm_V_mva, THEMIS.T_ani]
```

```{julia}
tvars2_wind = [
    tnorm_combine ∘ Wind.B,
    Wind.n,
    Wind.V_GSE,
    Wind.Temp,
    Wind.Temp_ani
]

tvars_themis2 = [[THEMIS.B_FGL_GSE, THEMIS.n, THEMIS.V_GSE, THEMIS.T]; thm_mva_all]
```

```{julia}
f = let
    f = Figure(; size=(1200, 800))
    # plot_candidate(f[1, 1], Event(psp_events, 2), [tvars_psp; psp_mva_all]; link_xaxes)

    wind_event = AniEvent(wind_events, 1) # 300
    wind_T3 = extend(Wind.pTemp_ani, Second(20))
    wind_tvars = make_mva_products(wind_event, Wind.B_GSE, Wind.V_GSE, Wind.n_p, wind_T3)
    wind_tvars = [wind_tvars[3:end]; Wind.Temp_ani; Wind.n; Wind.Temp]
    for p in Wind.Temp_ani
        @info "$p" data = p(wind_event)
    end
    wind_plots = plot_candidate(f, wind_event, wind_tvars, tau)
    # themis_plots = plot_candidate(f[1, 3], Event(thm_events, 3), tvars_themis2, Minute(1); link_xaxes)
    # hideydecorations!(wind_plots)
    # hideydecorations!(themis_plots)
end
```

## Batch processing

Wind Speed, Time to Earth
300 km/s, ~5.8 days
400 km/s, ~3.9 days
500 km/s, ~3.5 days
700 km/s, ~2.5 days

## The effect of tau

```{julia}
psp_df_taus = map([2, 4, 8, 16, 32]) do tau
    psp_config["tau"] = tau
    df = PSPAnisotropy.produce(psp_config, psp_config["timeranges"][1]...)
    @transform! df :tau = tau
    compute_Alfvenicity_params!(df)
end

wind_df_taus = map([2, 4, 8, 16, 32]) do tau
    wind_config["tau"] = tau
    df = PSPAnisotropy.produce(wind_config, wind_config["timeranges"][1]...)
    @transform! df :tau = tau
    compute_Alfvenicity_params!(df)
end
```

Check examples

```{julia}
f = Figure(; size=(1200, 800))
# let df = psp_df_taus[1], config = psp_config
begin
    df = @subset(wind_df_taus[1], :index_std .> 4)
    config = wind_config
    event = filter_low_mva_quality(df)[5, :]
    fax, res_psp = plot_candidate(f[1, 1], event, config, Second(10))
    plot_var_info!(fax, event)
    @info "v_l_ratio" event.V_l_ratio event.V_l_ratio_max
end
f
```

```{julia}
f = Figure()
axR1 = Axis(f[1, 1])
axn1 = Axis(f[2, 1])
filter_func = df -> @subset(df, :index_std .> 2)

for (i, df) in enumerate(psp_df_taus)
    v_l_ratio_ts, n = get_vl_ratio_ts(filter_func(df), :V_l_ratio_max)
    lines!(axR1, v_l_ratio_ts)
    lines!(axn1, n)
end

axR2 = Axis(f[1, 2])
axn2 = Axis(f[2, 2])
for (i, df) in enumerate(wind_df_taus)
    v_l_ratio_ts, n = get_vl_ratio_ts(filter_func(df), :V_l_ratio_max)
    lines!(axR2, v_l_ratio_ts)
    lines!(axn2, n)
end

ylims!.((axR1, axR2), 0, 0.8)
# ylims!.((axn1, axn2), 0, 121)
easy_save("vl_ratio-tau")
f
```


## Thickness, current density comparison and Alfvénicity

```{julia}
using AlgebraOfGraphics
using Discontinuity: compute_params!, compute_Alfvenicity_params!
using Beforerr
using Beforerr: add_labels!
# using CairoMakie
using StatsBase
# CairoMakie.activate!()

set_AoG_theme!()
formats = (:pdf,)

foreach([:log10, :log2, :log]) do f
    @eval import Base: $f
    @eval $f(x::Unitful.Quantity) = $f(ustrip(x))
end

# df, configs = workload()
compute_params!(df)

# AoG fix
using LaTeXStrings
import AlgebraOfGraphics: append_unit_string
append_unit_string(s::LaTeXStrings.LaTeXString, u::String) = s


function alpha_layer(df, alpha)
    psp_df = @rsubset(df, :id == "PSP"; view=true)
    thm_df = @rsubset(df, :id == "THEMIS"; view=true)
    wind_df = @rsubset(df, :id == "Wind"; view=true)
    (data(thm_df) + data(wind_df)) * visual(; alpha) + data(psp_df)
end
```

```{julia}
fname = "properties_xy_comp-enc"

for enc in 7:9, 𝐧 in [:mva, :cross]
    view = true
    𝒎 = var_mapping(; 𝐧)

    tdf = subset_𝐧(dropmissing(@subset(df, :enc .== enc; view)), 𝐧)
    compute_Alfvenicity_params!(tdf)
    plt = alpha_layer(tdf, 0.618) * visual(Scatter; markersize=8, legend=(; alpha=1)) * mapping(color=:id, marker=:id)

    fig = Figure(size=(800, 300))
    axis = (; yscale=log10, xscale=log10)
    v_axis = (; yscale=log10, xscale=log10, limits=((2, 400), (2, 400)))

    ga = fig[1, 1]
    gb = fig[1, 2]
    gc = fig[1, 3]

    spec1 = plt * mapping(𝒎.l, 𝒎.j)
    spec2 = plt * mapping(𝒎.l_norm, 𝒎.j_norm)
    spec3 = plt * mapping(𝒎.v_Alfven, 𝒎.v_ion)

    grid1 = draw!(ga, spec1; axis)
    draw!(gb, spec2; axis)
    draw!(gc, spec3; axis=v_axis)

    slopes = (1.0, 0.7, 0.4, 0.1)
    foreach(slopes) do s
        lines!(1 .. 1000, (*)$s, linestyle=:dash, label="$s")
    end
    axislegend("slope", position=:lt)

    pretty_legend!(fig, grid1)
    add_labels!([ga, gb, gc])
    easy_save("$fname-$enc-$𝐧"; formats, force=true)
    display(fig)
end
```

![](../figures/properties_xy_comp-enc-7-mva.pdf)
![](../figures/properties_xy_comp-enc-7-cross.pdf)
![](../figures/properties_xy_comp-enc-8-mva.pdf)
![](../figures/properties_xy_comp-enc-8-cross.pdf)
![](../figures/properties_xy_comp-enc-9-mva.pdf)
![](../figures/properties_xy_comp-enc-9-cross.pdf)




```{julia}
for enc in 7:9
    tdf = filter_low_mva_quality(dropmissing(@subset(df, :enc .== enc; view=true), view=true))
    data_layer = data(tdf)
    legend = (; markersize=10, alpha=1)
    plt = data_layer * visual(Scatter; markersize=4, alpha=0.618, legend) * mapping(color=:id, marker=:id)

    fig = Figure(size=(800, 400))
    axis = (; yscale=identity, xscale=identity)

    ga = fig[1, 1]
    gb = fig[1, 2]

    spec1 = plt * mapping(𝒎.bn, 𝒎.ω)
    spec2 = plt * mapping(𝒎.bn, 𝒎.ω_in)

    grid1 = draw!(ga, spec1; axis)
    draw!(gb, spec2; axis)

    pretty_legend!(fig, grid1)
    add_labels!([ga, gb])
    display(fig)
end
```