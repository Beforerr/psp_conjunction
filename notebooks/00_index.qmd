Interactively exploring the quantities of solar wind.

## Data

- [PSP/FIELDS Level 2 and higher data](https://fields.ssl.berkeley.edu/data/), [SPDF - Coordinated Data Analysis Web (CDAWeb)](https://cdaweb.gsfc.nasa.gov/cgi-bin/eval2.cgi?dataset=PSP_FLD_L2_MAG_RTN&index=sp_phys)

WI_H1_SWE	Proton_W_moment	        Proton thermal speed W (km/s) from isotropic moment analysis
WI_H1_SWE	Proton_Wperp_moment 	Proton thermal speed Wperpendicular (km/s) from bimax moment analysis
WI_H1_SWE	Proton_Wpar_moment	    Proton thermal speed Wparallel (km/s) from bimax moment analysis

WI_H1_SWE	Proton_Wperp_nonlin	    Proton thermal speed perpendicular to the magnetic field direction [km/s].
WI_H1_SWE	Proton_Wpar_nonlin	    Proton thermal speed parallel to the magnetic field direction [km/s].
WI_PLSP_3DP	Ion omnidirectional fluxes 0.4-3 keV and moments, often at ~24 second resolution, PESA Low, Wind 3DP
WI_PM_3DP	Ion moments (computed on-board) @ 3 second (spin) resolution, PESA LOW, Wind 3DP

Notes: `thb_peim_t3_magQ` is not accurate in solar wind mode.

## Setup

```{julia}
using Dates
using DrWatson
using PSPAnisotropy
using PSPAnisotropy: Wind, PSP, THEMIS
using Discontinuity
using SPEDAS
```

## Overview

```{julia}
using Speasy
using SPEDAS: ulabel, smooth, tnorm_combine, tplot
using DimensionalData
using CairoMakie
# using GLMakie
using Statistics
using PartialFunctions
using Unitful
using Beforerr: _theme_legend, easy_save
using SPEDAS.SpaceDataModel: set, extend, @set
include("../src/psp_temp.jl")
include("../src/calc.jl")
include("../src/meta.jl")

update_theme!(_theme_legend(; padding=(0, 0, 0, 0)))
```

```{julia}
# along time get the temperature from anisotropic temperature
function tTemp(x; dims=Ti)
    return mean.(eachslice(x; dims))
end

mva_transform((V, B), tmin, tmax; tb_min=tmin, tb_max=tmax) = mva(V(tmin, tmax), B(tb_min, tb_max))
make_mva_transform(tb_min, tb_max) = mva_transform$(; tb_min, tb_max)

j_transform((V, B), tmin, tmax) = current_density(B(tmin, tmax), V(tmin, tmax))
```

```{julia}
tmin_psp = DateTime("2021-01-14")
tmax_psp = DateTime("2021-01-20")
tmin_wind = DateTime("2021-01-15")
tmax_wind = DateTime("2021-01-23")
_tmax_wind = DateTime("2021-01-15T02")

tmin_psp = DateTime("2021-01-16")
tmax_psp = DateTime("2021-01-19")
# tmin_wind = DateTime("2021-01-17")
# tmax_wind = DateTime("2021-01-18")
```

```{julia}
tvars_psp = [
    set(tnorm_combine ∘ PSP.B_1MIN; ylabel=B_ylabel, labels=B_RTN_labels),
    set(PSP.n; ylabel=n_ylabel),
    set(PSP.V; ylabel=V_ylabel, labels=V_RTN_labels),
    set(PSP.T; ylabel=T_ylabel)
]
```

```{julia}
tvars_wind = [
    set(tnorm_combine ∘ Wind.B_GSE; ylabel=B_ylabel, labels=B_XYZ_labels),
    set(Wind.n; ylabel=n_ylabel),
    # set(Wind.V_GSE_p; ylabel=V_ylabel),
    replace_outliers! ∘ set(Wind.V_GSE_K0; ylabel=V_ylabel, labels=V_XYZ_labels),
    set(Wind.T; ylabel=T_ylabel)
]
```


```{julia}
using CairoMakie
CairoMakie.activate!()
```

```{julia}
using Intervals: Interval

function get_themis_tmask(t0, t1) 
    thx_v_gse = THEMIS.V_GSE(t0, t1)
    _times = @views SPEDAS.times(thx_v_gse)[(thx_v_gse[:, 1].>-200u"km/s").|(thx_v_gse[:, 2].<-50u"km/s")]
    dt = Minute(10)
    its = union([Interval(t - dt, t + dt) for t in _times])
    return tmask!(its)
end
```

```{julia}
tvars_themis = [
    set(tnorm_combine ∘ THEMIS.B_GSE; ylabel=B_ylabel, labels=B_XYZ_labels),
    set(THEMIS.n; ylabel=n_ylabel),
    replace_outliers! ∘ set(THEMIS.V_GSE; ylabel=V_ylabel, labels=V_XYZ_labels),
    set(THEMIS.eTemp; ylabel=T_ylabel)
]

```

```{julia}
for enc in (7, 8, 9)
    (tmin_psp, tmax_psp), (tmin_wind, tmax_wind) = get_timerange(enc)

    _tmask! = get_themis_tmask(tmin_wind, tmax_wind)

    legend = (; position=Top())
    labels = '1':'9'

    f = Figure(; size=(1200, 600))
    plots = tplot(f[1, 1], tvars_psp[1:3], tmin_psp, tmax_psp; legend)
    add_labels!(f[1, 1]; labels, open="(a.")
    tplot(f[1, 2], tvars_wind[1:3], tmin_wind, tmax_wind; legend)
    add_labels!(f[1, 2]; labels, open="(b.")
    tplot(f[1, 3], _tmask! .∘ tvars_themis[1:3], tmin_wind, tmax_wind; legend)
    add_labels!(f[1, 3]; labels, open="(c.")
    easy_save("overview-$enc")


    f = Figure(; size=(1200, 600))
    plots = tplot(f[1, 1], tvars_psp, tmin_psp, tmax_psp; legend)
    add_labels!(f[1, 1]; labels, open="(a.")
    tplot(f[1, 2], tvars_wind, tmin_wind, tmax_wind; legend)
    add_labels!(f[1, 2]; labels, open="(b.")
    tplot(f[1, 3], _tmask! .∘ tvars_themis, tmin_wind, tmax_wind; legend)
    add_labels!(f[1, 3]; labels, open="(c.")
    easy_save("overview-$enc-all")
end
```

## Event example (with pressure anisotropy)

```{julia}
using Discontinuity: ids_finder
tau = Second(30)
psp_events = ids_finder(PSP.B, tmin_psp, tmax_psp, tau)
wind_events = ids_finder(Wind.B_GSE, tmin_wind, tmax_wind, tau, Wind.V_GSE, Wind.n_p)
thm_events = ids_finder(THEMIS.B_FGL_GSE, tmin_wind, tmax_wind, tau)
```

```{julia}
psp_B_mva = set(mva ∘ PSP.B; name="mva_B", labels=B_mva_labels)
psp_V_mva = Product((PSP.V, PSP.B), mva_transform; ylabel=V_ylabel, labels=V_mva_labels)
psp_eTemp_ani = Product(read_electron_temperature(), tview; labels=["Electron (parallel)", "Electron (perpendicular)"])
psp_pTemp_ani = Product(read_proton_temperature(), tview; labels=["Proton (parallel)", "Proton (perpendicular)"])
psp_Temp_ani = [psp_eTemp_ani, psp_pTemp_ani]
psp_mva_all = [psp_B_mva, psp_V_mva, psp_Temp_ani]

thm_B_mva = set(mva ∘ THEMIS.B_FGL_GSE; name="mva_B", labels=B_mva_labels)
thm_V_mva = Product((THEMIS.V_GSE, THEMIS.B_FGL_GSE), mva_transform; ylabel=V_ylabel, labels=V_mva_labels)
thm_mva_all = [thm_B_mva, thm_V_mva, THEMIS.T_ani]
```

```{julia}
function make_mva_product(event, V, B=V; kwargs...)
    mva_transform = make_mva_transform(t_us_ds(event)...)
    return Product((V, B), mva_transform; kwargs...)
end

function make_mva_products(event, B, V, n=nothing, T3=nothing)
    B_mva = make_mva_product(event, B, B; labels=B_mva_labels, ylabel=B_ylabel)
    V_mva = make_mva_product(event, V, B; labels=V_mva_labels, ylabel=V_ylabel)
    J = Product((V_mva, B_mva), j_transform)
    result = [tnorm_combine ∘ B, V, tnorm_combine ∘ B_mva, set(tsubtract ∘ V_mva; ylabel=ΔV_ylabel), J]
    isnothing(n) || push!(result, set(
        tsubtract ∘ Product((B_mva, n), alfven_velocity_ts);
        ylabel=ΔV_ylabel, labels=["Va_L", "Va_M", "Va_N"]
    ))
    isnothing(T3) || begin
        Λ = Product((B_mva, n, T3), anisotropy_ts; ylabel="Λ")
        Va_Λ = set(
            tsubtract ∘ Product((B_mva, n, T3), alfven_velocity_ani_ts);
            ylabel=ΔV_ylabel, labels=["Va*_L", "Va*_M", "Va*_N"]
        )
        push!(result, Λ, Va_Λ)
    end
    return result
end
```

```{julia}
tvars2_wind = [
    tnorm_combine ∘ Wind.B,
    Wind.n,
    Wind.V_GSE,
    Wind.Temp,
    Wind.Temp_ani
]

tvars_themis2 = [[THEMIS.B_FGL_GSE, THEMIS.n, THEMIS.V_GSE, THEMIS.T]; thm_mva_all]
```

```{julia}
function plot_candidate(f, event, ts, toffset=Second(0); kwargs...)
    tmin, tmax = t_us_ds(event)
    f = tplot(f, ts, tmin - toffset, tmax + toffset; kwargs...)
    tlines!(f, [tmin, tmax])
    f
end

f = let
    f = Figure(; size=(1200, 800))
    # plot_candidate(f[1, 1], Event(psp_events, 2), [tvars_psp; psp_mva_all]; link_xaxes)

    wind_event = AniEvent(wind_events, 1) # 300
    wind_T3 = extend(Wind.pTemp_ani, Second(20))
    wind_tvars = make_mva_products(wind_event, Wind.B_GSE, Wind.V_GSE, Wind.n_p, wind_T3)
    wind_tvars = [wind_tvars[3:end]; Wind.Temp_ani; Wind.n; Wind.Temp]
    for p in Wind.Temp_ani
        @info "$p" data = p(wind_event)
    end
    wind_plots = plot_candidate(f, wind_event, wind_tvars, tau)
    # themis_plots = plot_candidate(f[1, 3], Event(thm_events, 3), tvars_themis2, Minute(1); link_xaxes)
    # hideydecorations!(wind_plots)
    # hideydecorations!(themis_plots)
end
```

## Batch processing

Wind Speed, Time to Earth
300 km/s, ~5.8 days
400 km/s, ~3.9 days
500 km/s, ~3.5 days
700 km/s, ~2.5 days