Interactively exploring the quantities of solar wind.

## Data

- [PSP/FIELDS Level 2 and higher data](https://fields.ssl.berkeley.edu/data/), [SPDF - Coordinated Data Analysis Web (CDAWeb)](https://cdaweb.gsfc.nasa.gov/cgi-bin/eval2.cgi?dataset=PSP_FLD_L2_MAG_RTN&index=sp_phys)

WI_H1_SWE	Proton_W_moment	        Proton thermal speed W (km/s) from isotropic moment analysis
WI_H1_SWE	Proton_Wperp_moment 	Proton thermal speed Wperpendicular (km/s) from bimax moment analysis
WI_H1_SWE	Proton_Wpar_moment	    Proton thermal speed Wparallel (km/s) from bimax moment analysis

WI_H1_SWE	Proton_Wperp_nonlin	    Proton thermal speed perpendicular to the magnetic field direction [km/s].
WI_H1_SWE	Proton_Wpar_nonlin	    Proton thermal speed parallel to the magnetic field direction [km/s].
WI_PLSP_3DP	Ion omnidirectional fluxes 0.4-3 keV and moments, often at ~24 second resolution, PESA Low, Wind 3DP
WI_PM_3DP	Ion moments (computed on-board) @ 3 second (spin) resolution, PESA LOW, Wind 3DP

Notes: `thb_peim_t3_magQ` is not accurate in solar wind mode.

## Overview

```{julia}
using Speasy
using SPEDAS
using SPEDAS: ulabel, smooth
using DimensionalData
using GLMakie
using Statistics
# using CairoMakie
using Dates
using PartialFunctions
using Unitful
using Beforerr: _theme_legend
using SPEDAS.SpaceDataModel: set
using PSPAnisotropy
include("../src/psp_temp.jl")
using PSPAnisotropy: Wind, PSP, THEMIS

update_theme!(_theme_legend(; padding=(0, 0, 0, 0)))
```

```{julia}
# along time get the temperature from anisotropic temperature
function tTemp(x; dims=Ti)
    return mean.(eachslice(x; dims))
end

mva_transform((V, B), tmin, tmax) = mva(V(tmin, tmax), B(tmin, tmax))
```

```{julia}
tmin_psp = DateTime("2021-01-14")
tmax_psp = DateTime("2021-01-21")
tmin_wind = DateTime("2021-01-15")
tmax_wind = DateTime("2021-01-23")
tmax_wind = DateTime("2021-02-15")

tmin_psp = DateTime("2021-01-16")
tmax_psp = DateTime("2021-01-19")
# tmin_wind = DateTime("2021-01-17")
# tmax_wind = DateTime("2021-01-18")

B_ylabel = "B (nT)"
B_labels = ["Bx", "By", "Bz", "Magnitude"]
n_ylabel = ulabel("Density", "cm^-3")
V_ylabel = "Velocity (km/s)"
V_labels = ["Vx", "Vy", "Vz", "Magnitude"]
Temp_ylabel = "Temperature (eV)"

V_mva_labels = ["V_L", "V_M", "V_N"]
B_mva_labels = ["B_L", "B_M", "B_N"]
```

```{julia}
B = PSP.B(tmin_psp, tmin_psp + Hour(1))
V = PSP.V(tmin_psp, tmin_psp + Hour(1))
current_density(B, V)
```

```{julia}
tvars_psp = [
    tnorm_combine ∘ PSP.B,
    PSP.n,
    PSP.V,
    PSP.T
]
```

```{julia}
tvars_wind = [
    tnorm_combine ∘ Wind.B,
    Wind.n,
    # tsubtract ∘ SpeasyProduct("WI_K0_SWE_RTN/V_RTN"; ylabel=V_ylabel, labels=V_labels),
    tsubtract ∘ Wind.V,
    wind_temp
]
```

```{julia}
tvars_themis = [
    tnorm_combine ∘ THEMIS.B,
    THEMIS.n,
    THEMIS.V_GSE,
    THEMIS.T,
]
```

```{julia}
f = Figure(; size=(1200, 800))
add_title = false
legend = (; position=Top())
# plot = (; resample=(; n=Inf))
labels = '1':'9'
tplot(f[1, 1], tvars_psp, tmin_psp, tmax_psp; add_title, legend)
add_labels!(f[1, 1]; labels, open="(a.")

# tplot(f[1, 2], tvars_wind, tmin_wind, tmax_wind; add_title, legend)
# add_labels!(f[1, 2]; labels, open="(b.")

# tplot(f[1, 3], tvars_themis, tmin_wind, tmax_wind; add_title, legend)
# add_labels!(f[1, 3]; labels, open="(c.")
f
```

## Event example (with pressure anisotropy)

```{julia}
using Discontinuity

tau = Second(30)
# psp_events = detect_variance(PSP.B, tmin_psp, tmax_psp, tau)
# wind_events = detect_variance(Wind.B, tmin_wind, tmax_wind, tau)
thm_events = detect_variance(Wind.B, tmin_wind, tmax_wind, tau; split=Day(1))
```

```{julia}
psp_B_mva = set(mva ∘ PSP.B; name="mva_B", labels=B_mva_labels)
psp_V_mva = Product((PSP.V, PSP.B), mva_transform; ylabel=V_ylabel, labels=V_mva_labels)
psp_eTemp_ani = Product(read_electron_temperature(), tview; labels=["Electron (parallel)", "Electron (perpendicular)"])
psp_pTemp_ani = Product(read_proton_temperature(), tview; labels=["Proton (parallel)", "Proton (perpendicular)"])
psp_Temp_ani = [psp_eTemp_ani, psp_pTemp_ani]
psp_mva_all = [psp_B_mva, psp_V_mva, psp_Temp_ani]

wind_B_mva = set(mva ∘ Wind.B; name="mva_B", labels=B_mva_labels)
wind_V_mva = Product((Wind.V_GSE, Wind.B_GSE), mva_transform; ylabel=V_ylabel, labels=V_mva_labels)
wind_mva_all = [wind_B_mva, wind_V_mva, Wind.Temp_ani]

thm_B_mva = set(mva ∘ THEMIS.B_FGL_GSE; name="mva_B", labels=B_mva_labels)
thm_V_mva = Product((THEMIS.V_GSE, THEMIS.B_FGL_GSE), mva_transform; ylabel=V_ylabel, labels=V_mva_labels)
thm_mva_all = [thm_B_mva, thm_V_mva, THEMIS.T_ani]
```

```{julia}
using DataFrames

@kwdef struct Event
    start
    stop
    metadata = Dict()
end

Event(df::DataFrame, i) = Event(df.tstart[i], df.tstop[i], Dict())

(P::AbstractProduct)(e::Event) = P(e.start, e.stop)
```


```{julia}
function plot_candidate(f, event, ts, toffset=Second(0); kwargs...)
    tplot(f, ts, event.tstart - toffset, event.tstop + toffset; kwargs...)
end

let link_xaxes = false
    tvars_wind = [
        tnorm_combine ∘ Wind.B,
        Wind.n,
        Wind.V_GSE,
        Wind.temp,
        wind_B_mva,
        wind_V_mva,
        Wind.Temp_ani
    ]

    tvars_themis2 = [[THEMIS.B_FGL_GSE, THEMIS.n, THEMIS.V_GSE, THEMIS.T]; thm_mva_all]

    f = Figure(; size=(1200, 800))
    plot_candidate(f[1, 1], Event(psp_events, 2), [tvars_psp; psp_mva_all]; link_xaxes)
    wind_plots = plot_candidate(f[1, 2], Event(wind_events, 3), tvars_wind, Minute(1); link_xaxes)
    themis_plots = plot_candidate(f[1, 3], Event(thm_events, 3), tvars_themis2, Minute(1); link_xaxes)
    # hideydecorations!(wind_plots)
    # hideydecorations!(themis_plots)
    f
end
```