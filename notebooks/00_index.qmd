Interactively exploring the quantities of solar wind. See [Data](000_data.qmd) for more details about different data products.

## Setup

```{julia}
using Dates
using Speasy
using DrWatson
using PSPAnisotropy
using PSPAnisotropy: Wind, PSP, THEMIS
using Discontinuity
using Discontinuity: compute_params!, compute_Alfvenicity_params!, filter_low_mva_quality
using SPEDAS
using DataFrames, DataFramesMeta
using GLMakie
using SPEDAS: set_meta, set_meta!
using PartialFunctions

import PSPAnisotropy.Labels as ùë≥
import PSPAnisotropy.YLabel as ùíÄ

using Unitful
Unitful.preferunits(u"nA", u"km")
unitify(u) = (*)$u
unitify(u::String) = (*)$uparse(u)
```

## Event example (simple)

```{julia}
df, configs = workload()
compute_params!(df)
compute_Alfvenicity_params!(df)

psp_df = @rsubset(df, :id == "PSP"; view=true)
psp_config = configs[1]
wind_df = @rsubset(df, :id == "Wind"; view=true)
wind_config = configs[2]
thm_df = @rsubset(df, :id == "THEMIS"; view=true)
thm_config = configs[3]

thm_config["B"] = unitify("nT") ‚àò thm_config["B"]
```

```{julia}
function plot_candidate(f, event, config, toffset=Second(0); add_J=false, kwargs...)
    tmin, tmax = event.t_us_ds
    t0 = tmin - toffset
    t1 = tmax + toffset

    B_product = config["B"]
    V_product = config["V"]

    B = B_product(t0, t1) |> set_meta!(; ylabel="B", labels=ùë≥.B_RTN)
    V = V_product(t0, t1) |> set_meta!(; ylabel="V", labels=ùë≥.V_RTN)
    n = config["n"](t0, t1)

    B_mva = mva(B, B) |> set_meta(; labels=ùë≥.B_LMN)
    Va = Alfven_velocity_ts(B_mva, n) .|> u"km/s" |> set_meta(; labels=ùë≥.Va_LMN, ylabel="V")
    V_mva = mva(V, B) |> set_meta(; labels=ùë≥.V_LMN)

    result = [tnorm_combine(B_mva), tsubtract(V_mva), tsubtract(Va)]

    if add_J
        J = hcat(current_density(B_mva, V_mva)...) |> set_meta(; labels=ùë≥.J, ylabel="J")
        push!(result, J)
    end

    f = tplot(f, result; kwargs...)
    tlines!(f, [tmin, tmax])
    result
end

f = Figure(; size=(1200, 800))
psp_event = filter_low_mva_quality(psp_df)[4, :]
res_psp = plot_candidate(f[1, 1], psp_event, psp_config, Second(10))
@info "v_l_ratio" psp_event.v_l_ratio
# res_thm = plot_candidate(f[1, 2], thm_df[10, :], thm_config)
# res_thm = plot_candidate(f[1, 2], thm_df[14, :], thm_config)
# res_thm = plot_candidate(f[1, 2], thm_df[17, :], thm_config)
# res_wind = plot_candidate(f[1, 3], wind_df[1, :], wind_config, Second(10))
f

```

## Overview

<!-- TODO: add Alfv√©nicity over time -->

```{julia}
using Speasy
using SPEDAS: tnorm_combine, tplot, DataSet
using DimensionalData
using CairoMakie
# using GLMakie
using Statistics
using PartialFunctions
using Unitful
using Beforerr: _theme_legend, easy_save
using SPEDAS.SpaceDataModel: set, extend, @set
include("../src/psp_temp.jl")
include("../src/meta.jl")

import Discontinuity.AlgebraOfGraphics as AoG

update_theme!(;
    figure_padding=1,
    fonts=(; regular=AoG.firasans("Regular"), bold=AoG.firasans("Medium")),
    Legend=(; framevisible=false, padding=(0, 0, 0, -15)),
    Axis=(; xlabelfont=:bold, ylabelfont=:bold),
)

```

```{julia}
# along time get the temperature from anisotropic temperature
function tTemp(x; dims=Ti)
    return mean.(eachslice(x; dims))
end

mva_transform((V, B), tmin, tmax; tb_min=tmin, tb_max=tmax) = mva(V(tmin, tmax), B(tb_min, tb_max))
make_mva_transform(tb_min, tb_max) = mva_transform$(; tb_min, tb_max)

j_transform((V, B), tmin, tmax) = current_density(B(tmin, tmax), V(tmin, tmax))
```

```{julia}
tmin_psp = DateTime("2021-01-14")
tmax_psp = DateTime("2021-01-20")
tmin_wind = DateTime("2021-01-15")
tmax_wind = DateTime("2021-01-23")
_tmax_wind = DateTime("2021-01-15T02")

tmin_psp = DateTime("2021-01-16")
tmax_psp = DateTime("2021-01-19")
# tmin_wind = DateTime("2021-01-17")
# tmax_wind = DateTime("2021-01-18")
```

```{julia}
psp_B = set(tnorm_combine ‚àò PSP.B_1MIN; ylabel=ùíÄ.B, labels=ùë≥.B_RTN)
psp_V = set(PSP.V; ylabel=ùíÄ.V, labels=ùë≥.V_RTN)
psp_n = set(PSP.n_spi; ylabel=ùíÄ.n, yscale=identity)

tvars_psp = [psp_B, psp_n, psp_V]
tvars_psp_all = [
    psp_B,
    set(PSP.n; ylabel=ùíÄ.n),
    psp_V,
    set(PSP.T; ylabel=ùíÄ.T)
]
```

```{julia}
wind_B = set(tnorm_combine ‚àò Wind.B_GSE_1MIN; ylabel=ùíÄ.B, labels=ùë≥.B_XYZ)
wind_V = replace_outliers! ‚àò set(Wind.V_GSE_K0; ylabel=ùíÄ.V, labels=ùë≥.V_XYZ)

tvars_wind = [wind_B, set(Wind.n_p_K0; ylabel=ùíÄ.n), wind_V]
tvars_wind_all = [
    wind_B,
    set(Wind.n; ylabel=ùíÄ.n),
    wind_V,
    set(Wind.T; ylabel=ùíÄ.T)
]
```


```{julia}
using CairoMakie
CairoMakie.activate!()
```

```{julia}
using Intervals: Interval

function get_themis_tmask(t0, t1)
    thx_v_gse = THEMIS.V_GSE(t0, t1)
    _times = @views SPEDAS.times(thx_v_gse)[(thx_v_gse[:, 1].>-200u"km/s").|(thx_v_gse[:, 2].<-50u"km/s")]
    dt = Minute(10)
    its = union([Interval(t - dt, t + dt) for t in _times])
    return tmask!(its)
end
```

```{julia}
tvars_themis = [
    set(tnorm_combine ‚àò THEMIS.B_GSE; ylabel=ùíÄ.B, labels=ùë≥.B_XYZ),
    set(THEMIS.n; ylabel=ùíÄ.n),
    replace_outliers! ‚àò set(THEMIS.V_GSE; ylabel=ùíÄ.V, labels=ùë≥.V_XYZ),
    set(THEMIS.eTemp; ylabel=ùíÄ.T)
]
```

```{julia}
update_theme!(; Lines=(linewidth=1, alpha=0.9), figure_padding=(0, 0, 0, 15))

for enc in 7:9
    (tmin_psp, tmax_psp), (tmin_wind, tmax_wind) = get_timerange(enc)

    _tmask! = get_themis_tmask(tmin_wind, tmax_wind)

    legend = (; position=Top())
    labels = '1':'9'
    padding = (0, 30, 0, -30)

    f = Figure(; size=(800, 450))
    plots = tplot(f[1, 1], tvars_psp[1:3], tmin_psp, tmax_psp; legend)
    add_labels!(f[1, 1]; labels, open="(a.", padding)
    tplot(f[1, 2], tvars_wind[1:3], tmin_wind, tmax_wind; legend)
    add_labels!(f[1, 2]; labels, open="(b.", padding)
    # tplot(f[1, 3], _tmask! .‚àò tvars_themis[1:3], tmin_wind, tmax_wind; legend)
    # add_labels!(f[1, 3]; labels, open="(c.")
    easy_save("overview-$enc")

    # f = Figure(; size=(1200, 600))
    # plots = tplot(f[1, 1], tvars_psp, tmin_psp, tmax_psp; legend)
    # add_labels!(f[1, 1]; labels, open="(a.")
    # tplot(f[1, 2], tvars_wind, tmin_wind, tmax_wind; legend)
    # add_labels!(f[1, 2]; labels, open="(b.")
    # tplot(f[1, 3], _tmask! .‚àò tvars_themis, tmin_wind, tmax_wind; legend)
    # add_labels!(f[1, 3]; labels, open="(c.")
    # easy_save("overview-$enc-all")
end
```

## Event example (with pressure anisotropy)

```{julia}
using Discontinuity: ids_finder
tau = Second(30)
psp_events = ids_finder(PSP.B, tmin_psp, tmax_psp, tau)
wind_events = ids_finder(Wind.B_GSE, tmin_wind, tmax_wind, tau, Wind.V_GSE, Wind.n_p)
thm_events = ids_finder(THEMIS.B_FGL_GSE, tmin_wind, tmax_wind, tau)
```

```{julia}
psp_B_mva = set(mva ‚àò PSP.B; name="mva_B", labels=ùë≥.B_LMN)
psp_V_mva = Product((PSP.V, PSP.B), mva_transform; ylabel=ùíÄ.V, labels=ùë≥.V_LMN)
psp_eTemp_ani = Product(read_electron_temperature(), tview; labels=["Electron (parallel)", "Electron (perpendicular)"])
psp_pTemp_ani = Product(read_proton_temperature(), tview; labels=["Proton (parallel)", "Proton (perpendicular)"])
psp_Temp_ani = [psp_eTemp_ani, psp_pTemp_ani]
psp_mva_all = [psp_B_mva, psp_V_mva, psp_Temp_ani]

thm_B_mva = set(mva ‚àò THEMIS.B_FGL_GSE; name="mva_B", labels=ùë≥.B_LMN)
thm_V_mva = Product((THEMIS.V_GSE, THEMIS.B_FGL_GSE), mva_transform; ylabel=ùíÄ.V, labels=ùë≥.V_LMN)
thm_mva_all = [thm_B_mva, thm_V_mva, THEMIS.T_ani]
```

```{julia}
tvars2_wind = [
    tnorm_combine ‚àò Wind.B,
    Wind.n,
    Wind.V_GSE,
    Wind.Temp,
    Wind.Temp_ani
]

tvars_themis2 = [[THEMIS.B_FGL_GSE, THEMIS.n, THEMIS.V_GSE, THEMIS.T]; thm_mva_all]
```

```{julia}
function plot_candidate(f, event, ts, toffset=Second(0); kwargs...)
    tmin, tmax = t_us_ds(event)
    f = tplot(f, ts, tmin - toffset, tmax + toffset; kwargs...)
    tlines!(f, [tmin, tmax])
    f
end

f = let
    f = Figure(; size=(1200, 800))
    # plot_candidate(f[1, 1], Event(psp_events, 2), [tvars_psp; psp_mva_all]; link_xaxes)

    wind_event = AniEvent(wind_events, 1) # 300
    wind_T3 = extend(Wind.pTemp_ani, Second(20))
    wind_tvars = make_mva_products(wind_event, Wind.B_GSE, Wind.V_GSE, Wind.n_p, wind_T3)
    wind_tvars = [wind_tvars[3:end]; Wind.Temp_ani; Wind.n; Wind.Temp]
    for p in Wind.Temp_ani
        @info "$p" data = p(wind_event)
    end
    wind_plots = plot_candidate(f, wind_event, wind_tvars, tau)
    # themis_plots = plot_candidate(f[1, 3], Event(thm_events, 3), tvars_themis2, Minute(1); link_xaxes)
    # hideydecorations!(wind_plots)
    # hideydecorations!(themis_plots)
end
```

## Batch processing

Wind Speed, Time to Earth
300 km/s, ~5.8 days
400 km/s, ~3.9 days
500 km/s, ~3.5 days
700 km/s, ~2.5 days


## Thickness, current density comparison and Alfv√©nicity

```{julia}
using AlgebraOfGraphics
using Discontinuity: compute_params!, compute_Alfvenicity_params!
using Beforerr
using Beforerr: add_labels!
using CairoMakie
using StatsBase
CairoMakie.activate!()

set_aog_theme!()
formats = (:pdf,)

foreach([:log10, :log2, :log]) do f
    @eval import Base: $f
    @eval $f(x::Unitful.Quantity) = $f(ustrip(x))
end

df, configs = workload()
ùêß = :mva
ùíé = var_mapping(; ùêß)

compute_params!(df)

# AoG fix
using LaTeXStrings
import AlgebraOfGraphics: append_unit_string
append_unit_string(s::LaTeXStrings.LaTeXString, u::String) = s

subset_ùêß(df, ùêß) = ùêß == :mva ? filter_low_mva_quality(df) : df

function alpha_layer(df, alpha)
    psp_df = @rsubset(df, :id == "PSP"; view=true)
    thm_df = @rsubset(df, :id == "THEMIS"; view=true)
    wind_df = @rsubset(df, :id == "Wind"; view=true)
    (data(thm_df) + data(wind_df)) * visual(; alpha) + data(psp_df)
end
```

```{julia}
fname = "properties_xy_comp-enc"

for enc in 7:9, ùêß in [:mva, :cross]
    view = true
    ùíé = var_mapping(; ùêß)

    tdf = subset_ùêß(dropmissing(@subset(df, :enc .== enc; view)), ùêß)
    compute_Alfvenicity_params!(tdf)
    plt = alpha_layer(tdf, 0.618) * visual(Scatter; markersize=8, legend=(; alpha=1)) * mapping(color=:id, marker=:id)

    fig = Figure(size=(800, 300))
    axis = (; yscale=log10, xscale=log10)
    v_axis = (; yscale=log10, xscale=log10, limits=((2, 400), (2, 400)))

    ga = fig[1, 1]
    gb = fig[1, 2]
    gc = fig[1, 3]

    spec1 = plt * mapping(ùíé.l, ùíé.j)
    spec2 = plt * mapping(ùíé.l_norm, ùíé.j_norm)
    spec3 = plt * mapping(ùíé.v_Alfven, ùíé.v_ion)

    grid1 = draw!(ga, spec1; axis)
    draw!(gb, spec2; axis)
    draw!(gc, spec3; axis=v_axis)

    slopes = (1.0, 0.7, 0.4, 0.1)
    foreach(slopes) do s
        lines!(1 .. 1000, (*)$s, linestyle=:dash, label="$s")
    end
    axislegend("slope", position=:lt)

    pretty_legend!(fig, grid1)
    add_labels!([ga, gb, gc])
    easy_save("$fname-$enc-$ùêß"; formats, force=true)
    display(fig)
end
```

![](../figures/properties_xy_comp-enc-7-mva.pdf)
![](../figures/properties_xy_comp-enc-7-cross.pdf)
![](../figures/properties_xy_comp-enc-8-mva.pdf)
![](../figures/properties_xy_comp-enc-8-cross.pdf)
![](../figures/properties_xy_comp-enc-9-mva.pdf)
![](../figures/properties_xy_comp-enc-9-cross.pdf)


```{julia}
fname = "properties_hist-enc"

for enc in 7:9, ùêß in [:mva, :cross]
    view = true
    ùíé = var_mapping(; ùêß)
    datalimits_f = x -> quantile(x, [0.02, 0.98])
    # drop missing and NaN
    tdf = @chain df begin
        @subset(:enc .== enc, .!isnan.(:L_n_cross_norm); view)
        dropmissing
        subset_ùêß(ùêß)
        compute_Alfvenicity_params!
        @subset(.!isnan.(:v_l_ratio))
    end

    spec = data(tdf) *
           mapping([ùíé.l_log, ùíé.j_log, ùíé.l_norm_log, ùíé.j_norm_log, ùíé.v_l_ratio, ùíé.bn], layout=AoG.dims(1) => renamer(ones(String, 6))) *
           mapping(color=:id) *
           AoG.density(datalimits=datalimits_f)

    draw(spec, scales(Layout=(; palette=wrapped(cols=2))); facet=(; linkyaxes=:none))
    easy_save("$fname-$enc-$ùêß"; formats, force=true)
end
```

```{julia}
for enc in 7:9
    tdf = filter_low_mva_quality(dropmissing(@subset(df, :enc .== enc; view=true), view=true))
    data_layer = data(tdf)
    legend = (; markersize=10, alpha=1)
    plt = data_layer * visual(Scatter; markersize=4, alpha=0.618, legend) * mapping(color=:id, marker=:id)

    fig = Figure(size=(800, 400))
    axis = (; yscale=identity, xscale=identity)

    ga = fig[1, 1]
    gb = fig[1, 2]

    spec1 = plt * mapping(ùíé.bn, ùíé.œâ)
    spec2 = plt * mapping(ùíé.bn, ùíé.œâ_in)

    grid1 = draw!(ga, spec1; axis)
    draw!(gb, spec2; axis)

    pretty_legend!(fig, grid1)
    add_labels!([ga, gb])
    display(fig)
end
```